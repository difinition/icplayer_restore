<?xml version='1.0' encoding='UTF-8' ?><addon id='Controller_KR'><metadata></metadata><model><property name='Checks' displayName='Number of checks' type='string' isLocalized='false' isDefault='false'/><property name='Pages_IDs' displayName='Lesson pages&apos; IDs' type='text' isLocalized='false' isDefault='false'/></model><resources></resources><css></css><view></view><preview>&lt;p&gt;Controller KR&lt;/p&gt;</preview><presenter>/*
    * 08.01.2025: v1.55.6 - add attribute translate=&quot;no&quot; in Editable Window
    * 17.01.2025: v1.56 - add click function to &quot;audio_script&quot; modules; change &quot;btn_hint&quot; functionality to toggle and on click only; add &quot;close_hint&quot; functionality
    * 23.01.2025: v1.57 - revert &quot;btn_hint&quot; functionality to hover and remove &quot;close_hint&quot; functionality
    * 27.01.2025: v1.58 - add &quot;btn_explain&quot; toggle functionality on click; add Handwriting pages handling
    * 05.02.2025: v1.59 - add &quot;explain-pressed&quot; class to &quot;btn_explain&quot; when &quot;btn_window&quot; is visible
    * 11.02.2025: v1.59.5 - fix &quot;explain-pressed&quot; class not being removed when other &quot;btn_window&quot; is shown
    * 12.02.2025: v1.60 - fix &quot;btn_hint&quot; functionality on hover
    * 30.04.2025: v1.7 - add TXT_Popup as draggable
    * 05.05.2025: v1.8 - disable DSB_Info on PageLoaded, enable on check or done
    * 13.05.2025: v1.9 - check activities on reportable pages H11... and H12... and block CheckAnswers if one of them is not clicked
    * 13.05.2025: v1.9.1 - fix for v1.9: use MutationObserver instead of fixed setTimout, because of MathJax lazy loading
    * 15.05.2025: v1.9.2 - fix for hiding SA when SSB_Popup1 clicked on client&apos;s LMS
    * 16.05.2025: v1.9.3 - adding alt texts for Double_State_Button_Subtitles and Double_State_Button_Script
    * 21.05.2025: v1.9.4 - fix for 1.9.1
    * 26.05.2025: v1.9.5 - disable setting translate=no attribute for Math projects
    * 27.05.2025: v1.9.6 - adding alt texts for: addon_Rulers_KR, Double_State_Button_Eye
*/

function AddonController_KR_create() {

    var presenter = function () { };

    let lastVisitedPageId = &apos;0&apos;;
    let lastVisitedPageIndex = 0;
    let resetPressed = false;

    presenter.setPlayerController = function (controller) {
        presenter.playerController = controller;
        presenter.eventBus = controller.getEventBus();
        presenter.eventBus.addEventListener(&apos;ValueChanged&apos;, this);
        presenter.eventBus.addEventListener(&apos;ShowAnswers&apos;, this);
        presenter.eventBus.addEventListener(&apos;HideAnswers&apos;, this);
        presenter.eventBus.addEventListener(&apos;PageLoaded&apos;, this);
        presenter.eventBus.addEventListener(&apos;LimitedCheck&apos;, this);
        presenter.presentation = controller.getPresentation();
        presenter.commander = controller.getCommands();
        presenter.currentIndex = controller.getCurrentPageIndex();
        presenter.scoreService = controller.getScore();
    };

    presenter.run = function (view, model) {
        console.log(&apos;Controller KR v1.9.6&apos;);

        // added in v1.55.1, removed in v1.55.2
        // document.documentElement.setAttribute(&apos;translate&apos;, &apos;no&apos;);

        // added in v1.55.2
        document.querySelectorAll(&apos;[lang=&quot;en-US&quot;]&apos;).forEach(element =&gt; {
            element.setAttribute(&apos;translate&apos;, &apos;no&apos;);
        });
        // added in v1.55.3
        document.querySelectorAll(&apos;[id*=&quot;_NOTRANSLATE&quot;]&apos;).forEach(element =&gt; {
            element.setAttribute(&apos;translate&apos;, &apos;no&apos;);
            // added in v1.55.5
            let header = element.querySelector(&apos;.addon-editable-window-wrapper .header&apos;);
            if (header) {
                header.setAttribute(&apos;translate&apos;, &apos;yes&apos;);
                element.setAttribute(&apos;lang&apos;, &apos;en-US&apos;);
            }
            let text = element.querySelector(&apos;.addon-editable-window-wrapper .text-wrapper&apos;);
            if (text) text.setAttribute(&apos;translate&apos;, &apos;no&apos;);
        });
        // added in v1.55.4
        setTimeout(() =&gt; {
            document.querySelectorAll(&apos;.MathJax&apos;).forEach(element =&gt; {
                element.setAttribute(&apos;translate&apos;, &apos;no&apos;);
            });
        }, 300);
        // added in v1.9.3
        const subtitlesButton = document.querySelector(&apos;.Double_State_Button_Subtitles&apos;);
        if (subtitlesButton) {
            subtitlesButton.setAttribute(&apos;alt&apos;, &apos;자막 버튼&apos;);
        }
        const scriptButton = document.querySelector(&apos;.Double_State_Button_Script&apos;);
        if (scriptButton) {
            scriptButton.setAttribute(&apos;alt&apos;, &apos;대본 버튼&apos;);
        }        
        // added in v1.9.6
        $(&apos;.Double_State_Button_Eye&apos;).attr(&apos;alt&apos;, &apos;다음 계산 과정 보기&apos;);
        $(&apos;.addon_Rulers_KR&apos;).attr(&apos;alt&apos;, &apos;자, 각도기, 삼각자를 이용하여 푸는 시각적 활동입니다. ~&apos;);

        presenter.addAltAttributeToImg(true);           // fix adding &quot;alt&quot; attribute to DSB &lt;img&gt; element
        presenter.addAltAttributeToImgIDBackground();   // fix adding &quot;alt&quot; attribute to ImageID background-image

        presenter.view = view;
        presenter.model = model;

        presenter.projectName = getComputedStyle(document.documentElement).getPropertyValue(&apos;--project&apos;).replace(/&apos;|&quot;/gi, &apos;&apos;).trim();
        presenter.projectFontFamily = &apos;Noto Sans&apos;;

        presenter.layout = getComputedStyle(document.documentElement).getPropertyValue(&apos;--layout&apos;).replace(/&apos;|&quot;/gi, &apos;&apos;).trim();
        presenter.switchContrast();
        presenter.switchLayout();

        presenter.splitPageCounter();
        presenter.addClassToPageName();

        presenter.pagesIDs = [];
        if (model[&apos;Pages_IDs&apos;]) presenter.pagesIDs = model[&apos;Pages_IDs&apos;].replaceAll(&apos; &apos;, &apos;&apos;).replaceAll(&apos;&quot;&apos;, &apos;&apos;).replaceAll(&quot;&apos;&quot;, &apos;&apos;).split(&apos;,&apos;);

        presenter.localPagesIDs = presenter.collectLocalPagesIDs();
        presenter.whiteboardFontSize = 30;
        presenter.PageAllOkArray = [];
        presenter.pageDone = [];
        presenter.handwritingData = presenter.localPagesIDs.map(p =&gt; p = { submitted: false, reset: false, mode: false });
        presenter.isAvatarReady = false;
        presenter.showAnswerCounter = [];
        presenter.isTextNarrationVisible = false;

        presenter.pageHeight = $(&apos;.ic_page&apos;).outerHeight(true);
        presenter.isInFrame = window.parent.location != window.location;

        if (presenter.model.Checks == undefined || presenter.model.Checks == &apos;&apos;) {
            presenter.checksNumber = 2;
        } else {
            presenter.checksNumber = parseInt(presenter.model.Checks);
        }
        if (presenter.getHideShowAnswersCount() &amp;&amp; presenter.getHideShowAnswersCount() &gt; 0) {
            presenter.checksNumber = presenter.getHideShowAnswersCount();
        }

        presenter.textAudioCount = presenter.getModulesCount(&apos;TextAudio&apos;);
        presenter.textNarrationCount = presenter.getModulesCount(&apos;audio_text&apos;);

        presenter.pageModules = presenter.getAllPageModules();
        presenter.recordersCount = presenter.getRecordersCount();
        presenter.DSBCount = presenter.getDSBCount();
        presenter.audioCount = presenter.getAudioCount();
        presenter.pageCounter = presenter.presentation.getPageCount();

        var page = presenter.presentation.getPage(presenter.currentIndex);
        var iframe = presenter.playerController.getModule(&apos;Iframe1&apos;);
        if (page.isReportable() &amp;&amp; iframe != undefined) {
            $(&apos;.ic_page&apos;).append(&apos;&lt;div class=&quot;avatar_animation_loading&quot;&gt;&lt;/div&gt;&apos;);
        }

        presenter.editableWindows = presenter.getPageModules(&apos;EditableWindow&apos;);

        var whiteboard = presenter.playerController.getHeaderModule(&apos;whiteboard&apos;);
        if (whiteboard) presenter.whiteboardDisplay = whiteboard.getView().style.display;

        presenter.studentHideElements();

        // limited panel
        presenter.createLimitedArrays();
        presenter.collectLimitedPanels(0);

        lastVisitedPageId = presenter.presentation.getPage(presenter.currentIndex).getId();

        presenter.setANBPageCounter();

        // added in v1.9
        presenter.collectClickableElements();

        <!-- ipad 네이버웨일 브라우저 로딩 이슈 대응 -->
        if (/Whale/.test(navigator.userAgent) &amp;&amp; /iPad/.test(navigator.platform)) {
            presenter.avatarReady();
        }

        // presenter.view.addEventListener(&apos;DOMNodeRemoved&apos;, function onDOMNodeRemoved(event) {
        //     if (event.target === this) {
        //         presenter.destroy();
        //     }
        // });
        // MutationObserverService.createDestroyObserver(presenter.addonID, presenter.destroy, presenter.view);
        // MutationObserverService.createDestroyObserver(presenter.destroy);
        // MutationObserverService.setObserver();
    };

    presenter.addAltAttributeToImgIDBackground = () =&gt; {
        let $icPage = $(&apos;.ic_page&apos;);
        setTimeout(() =&gt; {
            let $backImage = $icPage.find(&apos;.image-identification-background-image&apos;);
            $backImage.each((idx, img) =&gt; {
                let id = $(img).parent().parent().attr(&apos;id&apos;);
                let imId = presenter.playerController.getModule(id);
                if (imId) {
                    let altText = imId.configuration.altText;
                    img.setAttribute(&apos;alt&apos;, altText);
                }
            });
        }, 400);
    };

    // fix adding &quot;alt&quot; attribute to DSB &lt;img&gt; element
    presenter.addAltAttributeToImg = (isInitialLoad) =&gt; {
        let $icPage = $(&apos;.ic_page&apos;);
        let $btnSelected = $icPage.find(&apos;.doublestate-button-element-selected&apos;);
        let $btnDeselected = $icPage.find(&apos;.doublestate-button-element&apos;);

        if (isInitialLoad) {
            presenter.altTexts = {};
            $btnSelected.each((idx, button) =&gt; {
                let id = $(button).parent().parent().attr(&apos;id&apos;);
                let dsb = presenter.playerController.getModule(id);
                if (dsb) {
                    let altSelected = dsb.configuration.selected.imageAlternativeText;
                    let altDeselected = dsb.configuration.deselected.imageAlternativeText;
                    $(button).find(&apos;img&apos;).attr(&apos;alt&apos;, altSelected);
                    presenter.altTexts[id] = {};
                    presenter.altTexts[id][&apos;current&apos;] = altSelected;
                    presenter.altTexts[id][&apos;selected&apos;] = altSelected;
                    presenter.altTexts[id][&apos;deselected&apos;] = altDeselected;
                }
            });
            $btnDeselected.each((idx, button) =&gt; {
                let id = $(button).parent().parent().attr(&apos;id&apos;);
                let dsb = presenter.playerController.getModule(id);
                if (dsb) {
                    let altSelected = dsb.configuration.selected.imageAlternativeText;
                    let altDeselected = dsb.configuration.deselected.imageAlternativeText;
                    $(button).find(&apos;img&apos;).attr(&apos;alt&apos;, altDeselected);
                    presenter.altTexts[id] = {};
                    presenter.altTexts[id][&apos;current&apos;] = altDeselected;
                    presenter.altTexts[id][&apos;selected&apos;] = altSelected;
                    presenter.altTexts[id][&apos;deselected&apos;] = altDeselected;
                }
            });
        } else {
            $btnSelected.each((idx, button) =&gt; {
                let id = $(button).parent().parent().attr(&apos;id&apos;);
                let dsb = presenter.playerController.getModule(id);
                if (dsb) {
                    $(button).find(&apos;img&apos;).attr(&apos;alt&apos;, presenter.altTexts[id][&apos;current&apos;]);
                }
            });
            $btnDeselected.each((idx, button) =&gt; {
                let id = $(button).parent().parent().attr(&apos;id&apos;);
                let dsb = presenter.playerController.getModule(id);
                if (dsb) {
                    $(button).find(&apos;img&apos;).attr(&apos;alt&apos;, presenter.altTexts[id][&apos;current&apos;]);
                }
            });
        }
    };

    // Added in v1.55.4
    presenter.setTranslateAttribute = function () {
        // Added in v1.9.5
        function shouldSkipTranslateAttribute() {
            const rootStyles = getComputedStyle(document.documentElement);
            const projectValue = rootStyles.getPropertyValue(&apos;--project&apos;).trim();
            
            return projectValue &amp;&amp; projectValue.includes(&apos;Maths&apos;);
        }
        if (shouldSkipTranslateAttribute()) {
            //console.log(&apos;this is Math project, skipping translate=no setting&apos;)
            return;
        }
        //end

        let modulesList = [&apos;audio_text&apos;, &apos;FlashCards&apos;, &apos;Moving_Cards&apos;, &apos;shape_Check&apos;, &apos;shape_Yourself&apos;, &apos;video&apos;];
        for (let module of modulesList) {
            let specificList = presenter.getPageModules(`${module}`);
            if (specificList.length &gt;= 0) {
                specificList.forEach(element =&gt; {
                    let mdl = presenter.playerController.getModule(`${element}`);
                    let view;
                    if (mdl) {
                        view = mdl.getView();
                        view.setAttribute(&apos;translate&apos;, &apos;no&apos;);
                    };
                });
            };
        };
    };

    presenter.setANBPageCounter = function () {
        setTimeout(() =&gt; {
            let anb = presenter.playerController.getFooterModule(&apos;Assessments_Navigation_Bar1&apos;);
            let anbCounter = presenter.playerController.getHeaderModule(&apos;ANB_Counter&apos;);
            if (anb &amp;&amp; anbCounter) {
                let currPage = $(anb.getView()).find(&apos;.current_page&apos;).text();
                let model = presenter.playerController.getPresentation();
                let pageCount = model.getPageCount() - 1;
                // console.log(currPage + &apos;/&apos; + pageCount);
                anbCounter.setText(currPage + &apos;/&apos; + pageCount);
            }
        });
    };

    presenter.addClassToPageName = function () {
        let $shpPageName = $(&apos;.shape_color_pagename&apos;);
        if ($shpPageName.length) {
            let pageNameColor = $shpPageName.attr(&apos;id&apos;).slice(9);
            $(&apos;#Page_Name1&apos;).find(&apos;.pagename&apos;).addClass(&apos;pagename&apos; + pageNameColor);
        }
    };

    presenter.splitPageCounter = function () {
        let $pageCounter = $(&apos;.ic_header #Page_Counter1 .pagecounter&apos;);
        let txt = $pageCounter.text().trim();
        if (txt.length) {
            txt = txt.replaceAll(&apos; &apos;, &apos;&apos;);
            let arr = txt.split(&apos;/&apos;);
            txt = `&lt;span class=&quot;first&quot;&gt;${arr[0]}&lt;/span&gt;&lt;span class=&quot;slash&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;last&quot;&gt;${arr[1]}&lt;/span&gt;`;
            $pageCounter.html(txt);
        }
    };

    presenter.headerVisability = function () {
        let headerVisible = true;
        if (presenter.currentIndex == 0) headerVisible = false;
        presenter.commander.changeHeaderVisibility(headerVisible);
    };

    presenter.footerVisability = function () {
        let footerVisible = true;
        if (presenter.currentIndex == 0) footerVisible = false;
        presenter.commander.changeFooterVisibility(footerVisible);
    };

    presenter.collectLocalPagesIDs = function () {
        var model = presenter.playerController.getPresentation();
        var pagesID = [];
        for (var i = 0; i &lt; model.getPageCount(); i++) {
            pagesID.push(model.getPage(i).getId());
        }
        return pagesID;
    };

    presenter.getURLParams = function () {
        var urlParams = {};

        if (!presenter.playerController || presenter.playerController.isPlayerInCrossDomain()) return;

        try {
            if (window.parent) {
                urlParams = new URLSearchParams(window.parent.location.search);
            } else if (window.opener) {
                urlParams = new URLSearchParams(window.opener.location.search);
            } else {
                urlParams = new URLSearchParams(window.location.search);
            }
        } catch (e) { }

        return urlParams;
    };

    presenter.getLayoutContext = function () {
        var urlParams = presenter.getURLParams();
        if (urlParams &amp;&amp; urlParams.get(&apos;mobile&apos;) != null) {
            return true;
        } else {
            return false;
        }
    };

    presenter.switchLayout = function () {
        var layoutContext = presenter.getLayoutContext();
        let layoutName = presenter.getProjectLayoutName();
        if (layoutContext != undefined) {
            if (layoutContext == true) {
                presenter.playerController.changeSemiResponsiveLayout(layoutName[&apos;mobile&apos;]);
            }
        }
    };

    presenter.getContrastContext = function () {
        var context = presenter.playerController.getContextMetadata();
        if (context != null) {
            if (context.isDarkModeEnabled) return context.isDarkModeEnabled;
        }
        var urlParams = presenter.getURLParams();
        if (urlParams &amp;&amp; (urlParams.get(&apos;dark&apos;) != null || urlParams.get(&apos;dark&apos;) == &apos;true&apos;)) {
            return true;
        } else {
            return false;
        }
    };

    presenter.switchContrast = function () {
        var contrastContext = presenter.getContrastContext();
        if (contrastContext != undefined) {
            if (contrastContext == true) {
                $(&apos;.ic_page&apos;).addClass(&apos;highContrast&apos;);
                $(&apos;.ic_header&apos;).addClass(&apos;highContrast&apos;);
                setTimeout(() =&gt; $(&apos;.ic_footer&apos;).addClass(&apos;highContrast&apos;), 0);
            } else {
                $(&apos;.ic_page&apos;).removeClass(&apos;highContrast&apos;);
                $(&apos;.ic_header&apos;).removeClass(&apos;highContrast&apos;);
                setTimeout(() =&gt; $(&apos;.ic_footer&apos;).removeClass(&apos;highContrast&apos;), 0);
            }
        }
    };

    presenter.getTeacherContext = function () {
        var context = presenter.playerController.getContextMetadata();
        if (context != null) {
            if (context.isSchoolTeacher) return context.isSchoolTeacher;
        }
        var urlParams = presenter.getURLParams();
        if (urlParams &amp;&amp; ((urlParams.get(&apos;teacher&apos;) != null &amp;&amp; urlParams.get(&apos;teacher&apos;) != &apos;false&apos;) || urlParams.get(&apos;isSchoolTeacher&apos;) == &apos;true&apos; || urlParams.get(&apos;teacher&apos;) == &apos;true&apos;)) {
            return true;
        } else {
            return false;
        }
    };

    presenter.studentHideElements = function () {
        var teacherContext = presenter.getTeacherContext();
        if (teacherContext != null) {
            var whiteboard = presenter.playerController.getHeaderModule(&apos;whiteboard&apos;);
            var layeredImage = presenter.playerController.getModule(&apos;Layered_Image1&apos;);
            var iframe = presenter.playerController.getModule(&apos;Iframe1&apos;);
            if (teacherContext == false) {      // STUDENT
                presenter.hideModules(&apos;ShowModelAnswer&apos;);
                presenter.hideModules(&apos;Show_Example_Answer&apos;);
                presenter.hideModules(&apos;Example_Text&apos;);
                var resources = presenter.playerController.getHeaderModule(&apos;resources&apos;);
                var crossLesson = presenter.playerController.getHeaderModule(&apos;lesson&apos;);
                var iwb = presenter.playerController.getModule(&apos;IWB_Toolbar1&apos;);
                var btn = presenter.playerController.getHeaderModule(&apos;Cross_Lesson1&apos;);
                var dsb = presenter.playerController.getModule(&apos;DSB_ShowNoGaps&apos;);
                if (iwb) iwb.hide();
                if (whiteboard) whiteboard.hide();
                if (resources) resources.hide();
                if (crossLesson) crossLesson.hide();
                if (btn) btn.hide();
                if (dsb) dsb.hide();
                $(&apos;.Double_State_Button_TeachersNote&apos;).hide();
                presenter.hideModules(&apos;Gradual_Show_Answer1&apos;);

                if (layeredImage) {
                    $(layeredImage.getView()).removeClass(&apos;move_teacher&apos;);
                    if (presenter.mainCheckCounter &amp;&amp; presenter.mainCheckCounter[presenter.currentIndex] &gt;= presenter.checksNumber) $(layeredImage.getView()).addClass(&apos;move_student_sa&apos;);
                }
                if (iframe) {
                    $(iframe.getView()).removeClass(&apos;move_teacher&apos;);
                    if (presenter.mainCheckCounter &amp;&amp; presenter.mainCheckCounter[presenter.currentIndex] &gt;= presenter.checksNumber) $(iframe.getView()).addClass(&apos;move_student_sa&apos;);
                }
            } else {                            // TEACHER
                presenter.showModules(&apos;ShowModelAnswer&apos;);
                presenter.showModulesNoEnable(&apos;Limited_Show_Answers&apos;);
                presenter.showModulesNoEnable(&apos;Gradual_Show_Answer1&apos;);
                if (whiteboard) {
                    if (presenter.whiteboardDisplay != &apos;none&apos;) whiteboard.getView().style.display = &apos;&apos;;
                }

                if (layeredImage) {
                    $(layeredImage.getView()).removeClass(&apos;move_student_sa&apos;);
                    $(layeredImage.getView()).addClass(&apos;move_teacher&apos;);
                }
                if (iframe) {
                    $(iframe.getView()).removeClass(&apos;move_student_sa&apos;);
                    $(iframe.getView()).addClass(&apos;move_teacher&apos;);
                }
            }
        }
    };

    presenter.avatarReady = function () {
        var iframe = presenter.playerController.getModule(&apos;Iframe1&apos;);
        if (!iframe) return;

        var stage = $(iframe.getView()).find(&apos;iframe&apos;).get(0).contentWindow.stage;
        presenter.avatarsID = stage.children[0].children.length;
        for (var i = 1; i &lt;= presenter.avatarsID; i++) {
            stage.children[0][&apos;anim&apos; + i].alpha = 0;
        }
        presenter.isAvatarReady = true;
        if (presenter.response != &apos;&apos;) {
            presenter.respond(presenter.response);
        }
        var loadingScreen = $(&apos;.avatar_animation_loading&apos;);
        if (loadingScreen.hasOwnProperty(0)) {
            $(loadingScreen.get(0)).remove();
        }
    };

    // === HELPERS ===
    presenter.getPageModules = function (moduleName) {
        var allModules = presenter.presentation.getPage(presenter.currentIndex).getModulesAsJS();
        return allModules.filter((mod) =&gt; mod.indexOf(moduleName) == 0);
    };
    presenter.getModulesCount = function (moduleName) {
        return presenter.getPageModules(moduleName).length;
    };
    presenter.deselectModules = function (moduleName) {
        var modules = presenter.getPageModules(moduleName);
        for (var modul of modules) {
            var el = presenter.playerController.getModule(modul);
            if (el) el.deselect();
        }
    };
    presenter.hideModules = function (moduleName) {
        var modules = presenter.getPageModules(moduleName);
        for (var modul of modules) {
            var el = presenter.playerController.getModule(modul);
            if (el) el.hide();
        }
    };
    presenter.showModules = function (moduleName) {
        var modules = presenter.getPageModules(moduleName);
        for (var modul of modules) {
            var el = presenter.playerController.getModule(modul);
            if (el) {
                el.show();
                if (!moduleName.includes(&apos;Feedback&apos;)) el.enable();
            }
        }
    };
    presenter.showModulesNoEnable = function (moduleName) {
        var modules = presenter.getPageModules(moduleName);
        for (var modul of modules) {
            var el = presenter.playerController.getModule(modul);
            if (el) el.show();
        }
    };
    // added in v1.7
    presenter.makeDraggable = function (moduleName) {
        setTimeout(() =&gt; {
            presenter.scaleInfo = presenter.playerController.getScaleInformation();
            let modules = presenter.getPageModules(moduleName);
            for (var modul of modules) {
                var el = presenter.playerController.getModule(modul);
                if (el) {
                    let $elView = $(el.getView());
                    $elView.draggable({
                        containment: &apos;parent&apos;,
                        start: (e, ui) =&gt; {
console.log(presenter.scaleInfo);
                            console.log(ui);
                        },
                        drag: (e, ui) =&gt; {
                            ui.position.top /= presenter.scaleInfo.scaleY;
                            ui.position.left /= presenter.scaleInfo.scaleX;
                        },
                        stop: (e, ui) =&gt; {
                            console.log(ui);
                        },
                    });
                    $elView.resizable({
                        containment: &apos;parent&apos;,
                        alsoResize: &apos;.text_draggable_media &gt; span, .text_scroll_vertical&apos;,
                        minHeight: 180,
                        maxHeight: 500,
                        minWidth: 300,
                        maxWidth: 800,
                        start: (e, ui) =&gt; {
                            ui.size.width /= presenter.scaleInfo.scaleX;
                            ui.size.height /= presenter.scaleInfo.scaleY;
                            ui.position.top /= presenter.scaleInfo.scaleY;
                            ui.position.left /= presenter.scaleInfo.scaleX;
                            console.log(ui);
                        },
                        resize: (e, ui) =&gt; {
                            // ui.position.top *= presenter.scaleInfo.scaleY;
                            // ui.position.left *= presenter.scaleInfo.scaleX;
                            // ui.size.width *= presenter.scaleInfo.scaleX;
                            // ui.size.height *= presenter.scaleInfo.scaleY;
                        },
                        stop: (e, ui) =&gt; {
                            console.log(ui);
                            // console.log(ui.position.top, ui.position.left);
                            // console.log(ui.size.width, ui.size.height);
                        },
                    });
                }
            }
        }, 1500);
    };
    presenter.getDraggableInitialPosition = function (moduleName) {
        presenter.draggableInitialPosition = {};
        var modules = presenter.getPageModules(moduleName);
        for (const name of modules) {
            let modul = document.querySelector(`#${name}`);
            let $media = $(`#${name}`);
            let cs = getComputedStyle(modul);
            presenter.draggableInitialPosition[name] = {
                top: cs.top,
                left: cs.left,
                bottom: cs.bottom,
                width: cs.width,
                height: $media.outerHeight() + &apos;px&apos;,
            };
            $(modul).css({
                top: cs.top,
                left: cs.left,
                width: cs.width,
                height: $media.outerHeight() + &apos;px&apos;,
            });

            const styleSheets = document.styleSheets;
            for (let sheet of styleSheets) {
                try {
                    for (let i = 0; i &lt; sheet.cssRules.length; i++) {
                        let rule = sheet.cssRules[i];
                        if (rule.selectorText == &quot;.text_draggable_media&quot;) {
                            rule.style.top = presenter.draggableInitialPosition[name].top;
                            rule.style.left = presenter.draggableInitialPosition[name].left;
                            rule.style.width = presenter.draggableInitialPosition[name].width;
                            rule.style.height = presenter.draggableInitialPosition[name].height;
                            rule.style.bottom = presenter.draggableInitialPosition[name].bottom;
                        }
                    }
                } catch (err) {
                    console.warn(err);
                }
            }
        }
    };
    presenter.setDraggableInitialPosition = function () {
        console.log(presenter.draggableInitialPosition);
        Object.entries(presenter.draggableInitialPosition).forEach(entry =&gt; {
            var modul = document.querySelector(`#${entry[0]}`);
            modul.style.top = entry[1].top;
            modul.style.left = entry[1].left;
            modul.style.width = entry[1].width;
            modul.style.height = entry[1].height;
            modul.style.bottom = entry[1].bottom;
        });
    };
    presenter.disableModules = function (moduleName, className, isClassCheck) {
        let modules = presenter.getPageModules(moduleName);
        for (var modul of modules) {
            let el = presenter.playerController.getModule(modul);
            if (isClassCheck) {
                if (el) {
                    let isRightClass = $(el.getView()).hasClass(className);
                    if (isRightClass) el.disable();
                }
            } else {
                if (el) el.disable();
            }
        }
    };
    presenter.enableModules = function (moduleName, className, isClassCheck) {
        let modules = presenter.getPageModules(moduleName);
        for (var modul of modules) {
            let el = presenter.playerController.getModule(modul);
            if (isClassCheck) {
                if (el) {
                    let isRightClass = $(el.getView()).hasClass(className);
                    if (isRightClass) el.enable();
                }
            } else {
                if (el) el.enable();
            }
        }
    };

    // === HELPERS for Audio and Media_Recorder
    presenter.getAllPageModules = function () {
        return presenter.presentation.getPage(presenter.currentIndex).getModulesAsJS();
    };
    presenter.getAudioCount = function () {
        return presenter.pageModules.filter((module) =&gt; module.indexOf(&apos;Audio&apos;) == 0).length;
    };
    presenter.getDSBCount = function () {
        return presenter.pageModules.filter((modul) =&gt; {
            if (modul.indexOf(&apos;Double_State_Button&apos;) == 0) {
                var btn = presenter.playerController.getModule(modul);
                if (btn) {
                    var button = $(btn.getView()).hasClass(&apos;Double_State_Button_Audio_Icon&apos;);
                    return button;
                } else {
                    return false;
                }
            }
        }).length;
    };
    presenter.getRecordersCount = function () {
        return presenter.pageModules.filter((module) =&gt; module.indexOf(&apos;Media_Recorder&apos;) == 0).length;
    };
    presenter.handleDSButtons = function (butNr, handle) {
        var multiAudio = presenter.playerController.getModule(&apos;MultiAudio1&apos;);
        if (multiAudio) multiAudio.stop();
        if (multiAudio &amp;&amp; butNr !== 0) multiAudio.play();

        for (var i = 1; i &lt; presenter.DSBCount + 1; i++) {
            var button = presenter.playerController.getModule(&apos;Double_State_Button&apos; + i);
            if (button &amp;&amp; butNr != i) {
                if ($(button.getView()).hasClass(&apos;Double_State_Button_Audio_Icon&apos;)) {
                    switch (handle) {
                        case &apos;deselect&apos;:
                            button.deselect();
                            break;
                        case &apos;disable&apos;:
                            button.disable();
                            break;
                        case &apos;enable&apos;:
                            button.enable();
                            break;
                    }
                }
            }
        }
    };
    presenter.stopTextAudio = function (audioNr) {
        for (var i = 1; i &lt; presenter.textAudioCount + 1; i++) {
            if (audioNr != i) {
                var textAudio = presenter.playerController.getModule(&apos;TextAudio&apos; + i);
                if (textAudio) textAudio.stop();
            }
        }
    };
    presenter.stopAudioText = function (audioNr) {
        for (var i = 1; i &lt; presenter.textNarrationCount + 1; i++) {
            if (audioNr != i) {
                var audioText = presenter.playerController.getModule(&apos;audio_text&apos; + i);
                if (audioText) audioText.stop();
            }
        }
    };
    presenter.stopRecorders = function (recNr) {
        for (var i = 1; i &lt; presenter.recordersCount + 1; i++) {
            if (recNr != i) {
                var mrec = presenter.playerController.getModule(&apos;Media_Recorder&apos; + i);
                if (mrec) {
                    mrec.stopPlaying();
                    mrec.stopRecording();
                    // mrec.setShowErrorsMode();
                }
            }
        }
    };
    presenter.stopAudio = function (audioNr) {
        for (var i = 1; i &lt; presenter.audioCount + 1; i++) {
            if (audioNr != i) {
                var audio = presenter.playerController.getModule(&apos;Audio&apos; + i);
                if (audio) audio.stop();
            }
        }
    };

    // === HELPERS for context metadata
    presenter.getHideShowAnswersContext = function () {
        var contextMetadata = presenter.playerController.getContextMetadata();
        if (contextMetadata) {
            return contextMetadata.hideShowAnswers;
        }
    };
    presenter.getHideShowAnswersOption = function () {
        var contextMetadata = presenter.playerController.getContextMetadata();
        if (contextMetadata) {
            return contextMetadata.hideShowAnswersOption;
        }
    };
    presenter.getHideShowAnswersCount = function () {
        var contextMetadata = presenter.playerController.getContextMetadata();
        if (contextMetadata &amp;&amp; contextMetadata.hideShowAnswersOption == 2) {
            return contextMetadata.showAnswersCheckCount;
        } else {
            return null;
        }
    };

    presenter.showSA = function () {
        let pageProgress = presenter.playerController.getModule(&apos;Page_Progress_Panel1&apos;);
        if (pageProgress != null) $(pageProgress.getView()).addClass(&quot;Page_Progress_Panel_SA&quot;);

        let SA = presenter.playerController.getModule(&apos;Show_Answers1&apos;);
        if (SA) {
            presenter.showAnswerCounter[presenter.currentIndex] = true;
            SA.show();
        }

        let dsbVideo = presenter.playerController.getModule(&apos;dsb_video&apos;);
        if (dsbVideo) dsbVideo.show();

        let Check_Button1 = presenter.playerController.getModule(&apos;Check_Button1&apos;);
        if (Check_Button1) $(Check_Button1.getView()).addClass(&apos;button_check_SA&apos;);

        let Reset1 = presenter.playerController.getModule(&apos;Reset1&apos;);
        if (Reset1) $(Reset1.getView()).addClass(&apos;Reset_Button_SA&apos;);

        // let id = presenter.presentation.getPage(presenter.currentIndex).getId();
        // let score = presenter.scoreService.getPageScoreById(id);
        // let pageAward = presenter.playerController.getModule(&apos;Layered_Image1&apos;);
        // if (pageAward &amp;&amp; score.maxScore &gt; 0 &amp;&amp; score.score === score.maxScore &amp;&amp; score.errorCount == 0) {
        //     pageAward.hideLayer(1);
        //     pageAward.hideLayer(2);
        //     let whichImg = presenter.PageAllOkArray[presenter.currentIndex];
        //     if (whichImg &lt; 3) pageAward.showLayer(whichImg);
        //     pageAward.show();
        // }
    };

    presenter.removeANBHeaderBookmark = function () {
        let ANB = presenter.playerController.getHeaderModule(&apos;Assessments_Navigation_Bar1&apos;);
        if (ANB) ANB.removeBookmark();

        ANB = presenter.playerController.getFooterModule(&apos;Assessments_Navigation_Bar1&apos;);
        if (ANB) ANB.removeBookmark();

        let pageAward = presenter.playerController.getModule(&apos;Layered_Image1&apos;);
        if (pageAward) pageAward.hide();
    };
    presenter.addANBHeaderBookmark = function () {
        let ANB = presenter.playerController.getHeaderModule(&apos;Assessments_Navigation_Bar1&apos;);
        if (ANB) ANB.bookmarkCurrentPage();

        let ANB2 = presenter.playerController.getFooterModule(&apos;Assessments_Navigation_Bar1&apos;);
        if (ANB2) setTimeout(() =&gt; ANB2.bookmarkCurrentPage());
    };

    // limited panel
    presenter.createLimitedArrays = function () {
        presenter.limitedCheckCount = [];
        presenter.mainCheckCounter = [];
    };
    presenter.collectLimitedPanels = function (noReset) {
        let isReportable = presenter.presentation.getPage(presenter.currentIndex).isReportable();
        if (!isReportable) return;

        let modulesList = presenter.presentation.getPage(presenter.currentIndex).getModulesAsJS();
        let tLGSA = modulesList.filter(m =&gt; m.indexOf(&apos;Gradual_Show_Answer&apos;) &gt; -1);
        let tLSA = modulesList.filter(m =&gt; m.indexOf(&apos;Limited_Show_Answers&apos;) &gt; -1);
        let tLC = modulesList.filter(m =&gt; m.indexOf(&apos;Limited_Check&apos;) &gt; -1);

        if (tLGSA.length == 0 || tLSA.length == 0 || tLC.length == 0) return;

        // modules top
        let moduleY = [];
        for (let tm of tLGSA) {
            let m = presenter.playerController.getModule(tm);
            if (m) moduleY.push(parseInt(m.getView().style.top));
        }

        presenter.panelGSA = new Array(moduleY.length);
        for (let i = 0; i &lt; moduleY.length; i++) {
            presenter.panelGSA[i] = [];
            // LGSA
            presenter.panelGSA[i].push(tLGSA[i]);
            // LSA
            for (let k = 0; k &lt; tLSA.length; k++) {
                let m = parseInt(presenter.playerController.getModule(tLSA[k]).getView().style.top);
                if (m &amp;&amp; Math.abs(m - moduleY[i]) &lt; 10) {
                    presenter.panelGSA[i].push(tLSA[k]);
                    break;
                }
            }
            // LC
            for (let k = 0; k &lt; tLC.length; k++) {
                let m = parseInt(presenter.playerController.getModule(tLC[k]).getView().style.top);
                if (m &amp;&amp; Math.abs(m - moduleY[i]) &lt; 10) {
                    presenter.panelGSA[i].push(tLC[k]);
                    break;
                }
            }
        }

        var teacherContext = presenter.getTeacherContext();
        if (teacherContext != undefined) {
            if (teacherContext == false) {
                for (let m of tLGSA) {
                    var modul = presenter.playerController.getModule(m);
                    if (modul) {
                        modul.hide();
                    } else {
                        modul.show();
                    }
                }
                for (let m of tLSA) {
                    if (!noReset) {
                        var modul = presenter.playerController.getModule(m);
                        if (modul) {
                            modul.hide();
                        } else {
                            modul.show();
                        }
                    }
                }
            }
        }
    };

    presenter.hideTextAudioTexts = function (name) {
        var moduleNames = presenter.getPageModules(name);
        for (var modul of moduleNames) {
            var TA = presenter.playerController.getModule(modul);
            if (TA) {
                var el = TA.getView().querySelector(&apos;.textaudio-text&apos;);
                if (el) $(el).css({ visibility: &apos;hidden&apos;, height: &apos;0&apos;, margin: &apos;0&apos;, padding: &apos;0&apos; });
            }
        }
    };

    presenter.getProjectLayoutName = function () {
        const DEFAULT_LAYOUT_NAMES = { &apos;desktop&apos;: &apos;desktop&apos;, &apos;mobile&apos;: &apos;Mobile&apos; };
        const LAYOUT_NAMES = {
            &apos;TestSecondary&apos;: { &apos;desktop&apos;: &apos;default&apos;, &apos;mobile&apos;: &apos;Mobile&apos; },
        };
        if (LAYOUT_NAMES[presenter.project]) {
            return LAYOUT_NAMES[presenter.project];
        } else {
            return DEFAULT_LAYOUT_NAMES;
        }
    };

    presenter.resetAudioscripts = function () {
        let scripts = presenter.getPageModules(&apos;audio_script&apos;);
        if (scripts.length &gt; 0) {
            scripts.forEach(el =&gt; {
                let text = presenter.playerController.getModule(el);
                if (text) {
                    $(text.getView()).css({ color: &apos;&apos; });
                    let additionalClasses = $(text.getView()).find(&apos;.additional_class&apos;);
                    if (additionalClasses !== undefined || additionalClasses.length &gt; 0) {
                        $(additionalClasses).css({ color: &apos;&apos; });
                    };
                };
            });
        };
    };

    presenter.blockParagraphs = function (boolean) {
        let paragraphs = presenter.getPageModules(&apos;Paragraph&apos;);
        let value, mdl;
        if (boolean == true) { value = &apos;none&apos; };
        if (boolean == false) { value = &apos;auto&apos; };
        if (value !== undefined &amp;&amp; paragraphs.length !== 0) {
            paragraphs.forEach(el =&gt; {
                mdl = presenter.playerController.getModule(`${el}`);
                if (mdl) $(mdl.getView()).css({ &apos;pointer-events&apos;: `${value}` });
            });
        };
    };

    presenter.handleTextSelections = function (boolean) {
        let modules = presenter.getPageModules(&apos;Text_Selection&apos;);
        if (modules.length != 0) {
            modules.forEach(function (el) {
                let mdl = presenter.playerController.getModule(el);
                if (mdl) {
                    let list = mdl.getView().querySelectorAll(&apos;.selectable&apos;);
                    if (boolean == true) {
                        if (mdl &amp;&amp; !mdl.isAttempted()) {
                            list.forEach(elem =&gt; $(elem).toggleClass(&apos;greyed-out&apos;, true));
                        } else if (mdl &amp;&amp; mdl.isAttempted()) {
                            list.forEach(elem =&gt; $(elem).toggleClass(&apos;greyed-out&apos;, false));
                        };
                    };
                    if (boolean == false) {
                        list.forEach(elem =&gt; $(elem).toggleClass(&apos;greyed-out&apos;, false))
                    };
                };
            });
        };
    };

    presenter.addShowAnswersClass = function (moduleName, boolean) {
        let modules = presenter.getPageModules(`${moduleName}`);
        modules.forEach((el) =&gt; {
            let mdl = presenter.playerController.getModule(`${el}`);
            if (mdl) $(mdl.getView()).toggleClass(&apos;answered&apos;, boolean);
        });
    };

    presenter.lockModule = function (name, value) {
        let target = presenter.playerController.getModule(name);
        if (target) $(target.getView()).toggleClass(&apos;module-locked&apos;, value);
    };

    presenter.handleHandwritingPage = function (e) {
        let hw = presenter.handwritingData[presenter.currentIndex];

        let drawing = presenter.playerController.getModule(&apos;hw_Drawing1&apos;);
        let paragraph = presenter.playerController.getModule(&apos;hw_Paragraph1&apos;);
        let colorButtons = presenter.getPageModules(&apos;hw_clr&apos;);
        let btnDraw = presenter.playerController.getModule(&apos;hw_btn_draw&apos;);
        let btnWrite = presenter.playerController.getModule(&apos;hw_btn_write&apos;);

        if (hw) {
            if (hw.mode == &apos;draw&apos;) {
                if (drawing) {
                    drawing.show();
                    colorButtons.forEach(m =&gt; presenter.playerController.getModule(m).show());
                };
                if (paragraph) paragraph.hide();
                if (btnWrite) btnWrite.deselect();
                if (btnDraw) btnDraw.select();
            } else if (hw.mode == &apos;write&apos;) {
                if (drawing) {
                    drawing.hide();
                    colorButtons.forEach(m =&gt; presenter.playerController.getModule(m).hide());
                };
                if (paragraph) paragraph.show();
                if (btnWrite) btnWrite.select();
                if (btnDraw) btnDraw.deselect();
            };
            handleHandwritingDrawing();

            if (e == &apos;Reset&apos;) {
                hw.reset = true;
                presenter.lockModule(&apos;hw_Paragraph1&apos;, false);
                presenter.lockModule(&apos;hw_Drawing1&apos;, false);
            };
            if (e == &apos;PageLoaded&apos;) {
                if (hw.submitted &amp;&amp; !hw.reset) {
                    presenter.lockModule(&apos;hw_Paragraph1&apos;, true);
                    presenter.lockModule(&apos;hw_Drawing1&apos;, true);
                };
            };
        };
    };

    function handleHandwritingDrawing() {
        let colorData = { black: &apos;#000000&apos;, blue: &apos;#0E86D8&apos;, yellow: &apos;#FFEE41&apos;, red: &apos;#D93023&apos; };
        let drawing = presenter.playerController.getModule(&apos;hw_Drawing1&apos;);
        let colorButtons = presenter.getPageModules(&apos;hw_clr&apos;);
        if (drawing) {
            let canvas = drawing.getView().querySelector(&apos;.tmp_canvas&apos;);
            let color = colorButtons.find(m =&gt; presenter.playerController.getModule(m).isSelected()).slice(7);
            if (color == &apos;eraser&apos;) {
                canvas.classList.add(&apos;Drawing_eraser&apos;);
                drawing.setEraserThickness(20);
                drawing.setEraserOn();
            } else {
                canvas.classList.remove(&apos;Drawing_eraser&apos;);
                drawing.setColor(colorData[color]);
            };
        };
    };

    // === EVENTS ===
    presenter.onEventReceived = function (eventName, eventData) {
        console.log(&apos;eventName:&apos;, eventName, &apos;\neventData.source:&apos;, eventData.source, &apos;\neventData.value:&apos;, eventData.value, &apos;\neventData.item:&apos;, eventData.item, &apos;\neventData.score:&apos;, eventData.score);

        if (eventData.source == undefined) return;

        // fix adding &quot;alt&quot; attribute to DSB &lt;img&gt; element
        if (eventName == &apos;ValueChanged&apos;) {
            let $elem = $(`#${eventData.source}`);
            isDeselected = $elem.find(&apos;.doublestate-button-element&apos;).length;
            isSelected = $elem.find(&apos;.doublestate-button-element-selected&apos;).length;
            if (isDeselected || isSelected) {
                if (eventData.value == &apos;1&apos;) {
                    let dsbImgSelected = $elem.find(&apos;.doublestate-button-element-selected&apos;).find(&apos;img&apos;);
                    dsbImgSelected.attr(&apos;alt&apos;, presenter.altTexts[eventData.source][&apos;selected&apos;]);
                    presenter.altTexts[eventData.source][&apos;current&apos;] = presenter.altTexts[eventData.source][&apos;selected&apos;];
                } else {
                    let dsbImgDeselected = $elem.find(&apos;.doublestate-button-element&apos;).find(&apos;img&apos;);
                    dsbImgDeselected.attr(&apos;alt&apos;, presenter.altTexts[eventData.source][&apos;deselected&apos;]);
                    presenter.altTexts[eventData.source][&apos;current&apos;] = presenter.altTexts[eventData.source][&apos;deselected&apos;];
                }
            }
        }

        // fix for popup &quot;position: fixed&quot;
        let popupPosition = $(&apos;#popup&apos;).css(&apos;position&apos;);
        if (popupPosition == &apos;fixed&apos;) $(&apos;#popup&apos;).css(&apos;position&apos;, &apos;absolute&apos;);

        if (eventName == &apos;ShowAnswers&apos;) {
            presenter.showModules(&apos;Feedback&apos;);
            presenter.showModulesNoEnable(&apos;TXT_Popup&apos;);
            presenter.isPopupVisible = true;
            presenter.isShowAnswer = true;

            presenter.addShowAnswersClass(&apos;Connection&apos;, true);
            presenter.addShowAnswersClass(&apos;Coloring&apos;, true);
        }
        if (eventName == &apos;HideAnswers&apos;) {
            setTimeout(() =&gt; presenter.hideModules(&apos;Feedback&apos;));
            setTimeout(() =&gt; presenter.hideModules(&apos;TXT_Popup&apos;));
            presenter.isPopupVisible = false;
            presenter.isShowAnswer = false;

            presenter.addShowAnswersClass(&apos;Connection&apos;, false);
            presenter.addShowAnswersClass(&apos;Coloring&apos;, false);
        };

        if (eventData.source.indexOf(&apos;SSB_Popup&apos;) == 0) {
            presenter.hideModules(&apos;TXT_Popup&apos;);
            presenter.isPopupVisible = false;
            // added in v1.9.2
            if (presenter.isShowAnswer) {
                console.log(&apos;force ShowAnswers when hiding TXT_Popup&apos;);
                setTimeout(() =&gt; presenter.commander.showAnswers(), 200);
            }
        }

        if (eventName == &apos;PageLoaded&apos; &amp;&amp; eventData.source != &apos;header&apos; &amp;&amp; eventData.source != &apos;footer&apos;) {
            // added in v1.8
            presenter.disableModules(&apos;DSB_Info&apos;, &apos;Double_State_Button_Example&apos;, true);

            // Add translate=&quot;no&quot; attribute to specific modules
            presenter.setTranslateAttribute();

            // Hide &apos;.additional_hide_mathjax&apos; &lt;span&gt; from being read by screen-readers
            $(&apos;.additional_hide_mathjax&apos;).attr(&apos;aria-hidden&apos;, &apos;true&apos;);

            presenter.hideModules(&apos;Feedback&apos;);
            presenter.hideModules(&apos;TXT_Popup&apos;);
            presenter.makeDraggable(&apos;TXT_Popup&apos;);
            presenter.getDraggableInitialPosition(&apos;TXT_Popup&apos;);

            // === Highlighted Text modules as audio script on page ===
            let scripts = presenter.getPageModules(&apos;audio_script&apos;);
            let audio = presenter.playerController.getModule(&apos;audio_text1&apos;);
            if (audio &amp;&amp; scripts !== undefined &amp;&amp; scripts.length &gt; 0) {
                scripts.forEach(el =&gt; {
                    let m = presenter.playerController.getModule(el);
                    m.getView().addEventListener(&apos;click&apos;, () =&gt; {
                        audio.goTo(0, parseInt(el.slice(12)));
                    });
                });
                let scr = $(audio.getView()).find(&apos;.textaudio-text&apos;)[0];
                if (scr !== undefined) {
                    let observer = new MutationObserver((ev) =&gt; {
                        let nodes = ev.filter(el =&gt; el.target.className.indexOf(&apos;active&apos;) &gt;= 0);
                        if (nodes.length &gt; 0) {
                            let target = nodes[0].target;
                            if (target !== undefined) {
                                presenter.resetAudioscripts();
                                let idx = target.getAttribute(&apos;data-selectionid&apos;);
                                let active = presenter.playerController.getModule(&apos;audio_script&apos; + idx);
                                if (active) {
                                    $(active.getView()).css({ color: &apos;var(--red_600)&apos; });
                                    let additionalClasses = $(active.getView()).find(&apos;.additional_class&apos;);
                                    if (additionalClasses !== undefined || additionalClasses.length &gt; 0) {
                                        $(additionalClasses).css({ color: &apos;var(--red_600)&apos; });
                                    };
                                };
                            } else {
                                presenter.resetAudioscripts();
                            };
                        };
                    });
                    observer.observe(scr, {
                        attributes: true,
                        attributeFilter: [&apos;class&apos;],
                        subtree: true,
                    });
                };
            };
        };
        // === Remove first highlighted Text module after TextAudio stopped playback ===
        if (eventData.source == &apos;audio_text1&apos; &amp;&amp; eventData.item == &apos;end&apos;) {
            let scripts = presenter.getPageModules(&apos;audio_script&apos;);
            if (scripts !== undefined &amp;&amp; scripts.length &gt; 0) {
                scripts.forEach(el =&gt; {
                    let text = presenter.playerController.getModule(el);
                    if (text) $(text.getView()).css({ color: &apos;var(--black)&apos; });
                });
            };
        };

        // === Highlight Paragraphs with default CSS class and hidden toolbar when focused ===
        if (eventName == &quot;PageLoaded&quot; &amp;&amp; eventData.source != &apos;header&apos; &amp;&amp; eventData.source != &apos;footer&apos;) {
            let paragraphs = presenter.getPageModules(&apos;Paragraph&apos;);
            if (paragraphs.length &gt; 0) {
                paragraphs.forEach(el =&gt; {
                    let module, view, nodes, iframe, body;
                    module = presenter.playerController.getModule(el);
                    if (module &amp;&amp; module.configuration.isToolbarHidden) {
                        view = module.getView();
                        if ($(view).hasClass(&apos;addon_Paragraph&apos;)) {
                            iframe = $(view).find(&apos;iframe&apos;)[0];
                            if (iframe !== undefined) body = $(iframe.contentDocument).find(&apos;.mce-content-body&apos;)[0];
                            if (body == undefined) {
                                let observer = new MutationObserver(ev =&gt; {
                                    nodes = ev.filter(el =&gt; {
                                        if (el.addedNodes.length &gt; 0) { return el.addedNodes[0].tagName.indexOf(&apos;IFRAME&apos;) == 0 };
                                    });
                                    if (nodes.length &gt; 0) {
                                        iframe = nodes[0].addedNodes[0];
                                        body = iframe.contentDocument.querySelector(&apos;.mce-content-body&apos;);
                                        body.addEventListener(&apos;focusin&apos;, () =&gt; addBorder(view, true));
                                        body.addEventListener(&apos;focusout&apos;, () =&gt; addBorder(view, false));
                                    };
                                });
                                observer.observe(view, {
                                    childList: true,
                                    subtree: true,
                                });
                            } else {
                                body.addEventListener(&apos;focusin&apos;, () =&gt; addBorder(view, true));
                                body.addEventListener(&apos;focusout&apos;, () =&gt; addBorder(view, false));
                            };
                        };
                    };
                    function addBorder(element, boolean) {
                        $(element.firstChild).toggleClass(&apos;highlighted&apos;, boolean);
                    }
                });
            };
        };

        // === Highlight Editable &amp; Filled gaps when focused ===
        if (eventName == &quot;PageLoaded&quot; &amp;&amp; eventData.source != &apos;header&apos; &amp;&amp; eventData.source != &apos;footer&apos;) {
            let editable = document.querySelectorAll(&quot;input[class^=&apos;ic_gap&apos;]&quot;);
            let filled = document.querySelectorAll(&quot;input[class^=&apos;ic_filled_gap&apos;]&quot;);
            if (editable.length &gt; 0) {
                editable.forEach((el) =&gt; {
                    el.addEventListener(&apos;focusin&apos;, () =&gt; $(el).toggleClass(&apos;highlighted&apos;, true));
                    el.addEventListener(&apos;focusout&apos;, () =&gt; $(el).toggleClass(&apos;highlighted&apos;, false));
                });
            };
            if (filled.length &gt; 0) {
                filled.forEach((el) =&gt; {
                    el.addEventListener(&apos;focusin&apos;, () =&gt; $(el).toggleClass(&apos;highlighted&apos;, true));
                    el.addEventListener(&apos;focusout&apos;, () =&gt; $(el).toggleClass(&apos;highlighted&apos;, false));
                });
            };
        };

        // === Download recording from Media Recorder ===
        if (eventData.source.indexOf(&apos;SSB_downloadRecorder&apos;) == 0) {
            let idx = eventData.source.slice(20);
            if (idx == &apos;&apos;) idx = 1;
            let rec = presenter.playerController.getModule(&apos;Media_Recorder&apos; + idx);
            if (rec) {
                rec.getMP3File()
                    .then(blob =&gt; {
                        const url = URL.createObjectURL(blob);
                        const link = document.createElement(&apos;a&apos;);
                        link.href = url;
                        link.download = &apos;recording.mp3&apos;;
                        link.click();
                        URL.revokeObjectURL(url);
                    })
                    .catch(err =&gt; {
                        console.error(&apos;Error downloading file:&apos;, err);
                    });
            };
        };

        if (eventData.source.indexOf(&apos;DSB_feedback&apos;) == 0) {
            let fdb = presenter.playerController.getModule(&apos;TXT_feedback&apos;);
            if (eventData.value == 1) {
                if (fdb) fdb.show();
            } else if (eventData.value == 0) {
                if (fdb) fdb.hide();
            };
        };

        if (eventName == &quot;PageLoaded&quot; &amp;&amp; eventData.source != &apos;header&apos; &amp;&amp; eventData.source != &apos;footer&apos;) {
            let done = presenter.playerController.getModule(&apos;Done&apos;);
            if (done) {
                let view = done.getView();
                if ($(view).hasClass(&apos;text_identification_done&apos;)) {
                    if (done.isSelected()) {
                        presenter.blockParagraphs(true);
                    } else {
                        presenter.blockParagraphs(false);
                    };
                };
            };

            presenter.handleHandwritingPage(&apos;PageLoaded&apos;);
        };

        // === Gradual_Show_Answer ===
        if (eventData.source.indexOf(&apos;Gradual_Show_Answer1&apos;) == 0) {
            let gsa2 = presenter.playerController.getModule(&apos;Gradual_Show_Answer2&apos;);
            if (gsa2) gsa2.show();
            $(&apos;#Gradual_Show_Answer2&apos;).show();
        }
        if (eventData.source.indexOf(&apos;Gradual_Show_Answer2&apos;) == 0) {
            let gsa2 = presenter.playerController.getModule(&apos;Gradual_Show_Answer2&apos;);
            if (gsa2) gsa2.hide();
            $(&apos;#Gradual_Show_Answer2&apos;).hide();
        }

        // mutual hide of EditableWindows
        if (eventData.source.indexOf(&apos;EditableWindow&apos;) == 0) {
            for (let item of presenter.editableWindows) {
                if (item != eventData.source &amp;&amp; eventData.value == &apos;move-editable-windows&apos;) {
                    presenter.playerController.getModule(item).hide();
                }
            }
        }

        // === Remove Inline CSS in dark mode
        if (eventName == &quot;PageLoaded&quot; &amp;&amp; (eventData.source.indexOf(&apos;footer&apos;) == 0 || eventData.source.indexOf(&apos;header&apos;) == 0)) {
            if ($(&apos;.ic_page&apos;).hasClass(&apos;highContrast&apos;)) {
                let icPage = document.querySelector(&apos;.ic_page&apos;);
                let icHeader = document.querySelector(&apos;.ic_header&apos;);
                let icFooter = document.querySelector(&apos;.ic_footer&apos;);
                const removeAttributes = (element) =&gt; {
                    for (let child of element.children) {
                        if (child.style.color) child.style.color = &apos;&apos;;
                        if (child.style.background) child.style.background = &apos;&apos;;
                        if (child.style.backgroundColor) child.style.backgroundColor = &apos;&apos;;
                        if (child.style.border) child.style.border = &apos;&apos;;
                        if (child.style.borderColor) child.style.borderColor = &apos;&apos;;
                        if (child.style.font) child.style.font = &apos;&apos;;
                        if (child.style.boxShadow) child.style.boxShadow = &apos;&apos;;
                        let span = child.querySelectorAll(&apos;span&apos;);
                        if (span.length) {
                            for (let el of span) {
                                if (el.style.color) el.style.color = &apos;&apos;;
                            }
                        }
                        let font = child.querySelectorAll(&apos;font&apos;);
                        if (font.length) {
                            for (let el of font) {
                                el.removeAttribute(&apos;color&apos;);
                            }
                        }
                        let td = child.querySelectorAll(&apos;td&apos;);
                        if (td.length) {
                            for (let el of td) {
                                if (el.style.background) el.style.background = &apos;&apos;;
                                if (el.style.backgroundColor) el.style.backgroundColor = &apos;&apos;;
                            }
                        }
                        if (child.id.indexOf(&apos;Example_Text&apos;) == 0 || child.id.indexOf(&apos;ModelText&apos;) == 0) {
                            if (child.classList.length == 1 &amp;&amp; child.classList[0] == &apos;ic_text&apos;) child.classList.add(&apos;Paragraph_Text_Dark&apos;);
                        }
                    }
                };
                if (icPage) removeAttributes(icPage);
                if (icHeader) removeAttributes(icHeader);
                if (icFooter) removeAttributes(icFooter);
            }
        }

        // === ChangeLayout ===
        if (eventData.source.indexOf(&apos;ChangeLayout&apos;) == 0) {
            let layoutName = presenter.getProjectLayoutName();
            if (eventData.value == &apos;1&apos;) {
                presenter.playerController.changeSemiResponsiveLayout(layoutName[&apos;mobile&apos;]);
            } else {
                presenter.playerController.changeSemiResponsiveLayout(layoutName[&apos;desktop&apos;]);
            }
        }

        // === EditableWindow ===
        if (eventData.source.indexOf(&apos;EditableWindow&apos;) &gt;= 0) {
            var len = presenter.getModulesCount(&apos;EditableWindow&apos;);
            var ewIsVisible = false;
            for (var i = 1; i &lt;= len; i++) {
                var ew = presenter.playerController.getModule(&apos;EditableWindow&apos; + i);
                if (ew) {
                    ew.getView().style.zIndex = &apos;105&apos;;
                    if (ew.isVisible()) {
                        ewIsVisible = true;
                    }
                }
            }
            var iwb = presenter.playerController.getModule(&apos;IWB_Toolbar1&apos;);
            if (eventData.value == &apos;move-editable-windows&apos;) {
                if (iwb) iwb.hide();
            } else if (eventData.value == &apos;close&apos; &amp;&amp; !ewIsVisible) {
                var teacherContext = presenter.getTeacherContext();
                if (teacherContext != undefined) {
                    if (teacherContext) {
                        if (iwb) iwb.show();
                    }
                }
            }
        }
        if (eventName == &quot;PageLoaded&quot; &amp;&amp; eventData.source != &apos;header&apos; &amp;&amp; eventData.source != &apos;footer&apos;) {
            var iwb = presenter.playerController.getModule(&apos;IWB_Toolbar1&apos;);
            var teacherContext = presenter.getTeacherContext();
            if (teacherContext != undefined) {
                if (teacherContext) {
                    if (iwb) iwb.show();
                }
            }
        }

        // === limited panel ===
        if (eventName == &apos;LimitedCheck&apos; &amp;&amp; eventData.value != &apos;unchecked&apos;) {
            let id = parseInt(eventData.source.slice(13));
            presenter.collectLimitedPanels(1);
            let len = presenter.panelGSA.length;
            for (let i = 0; i &lt; len; i++) {
                if (presenter.panelGSA[i].includes(eventData.source)) {
                    id = i;
                    break;
                }
            }
            if (!presenter.limitedCheckCount[presenter.currentIndex]) {
                presenter.limitedCheckCount[presenter.currentIndex] = [];
            }
            if (presenter.limitedCheckCount[presenter.currentIndex][id]) {
                presenter.limitedCheckCount[presenter.currentIndex][id] += 1;
            } else {
                presenter.limitedCheckCount[presenter.currentIndex][id] = 1;
            }
            if (presenter.limitedCheckCount[presenter.currentIndex][id] &gt;= presenter.checksNumber) {
                presenter.playerController.getModule(presenter.panelGSA[id][1]).show();
            }
        }

        if (eventData.source.indexOf(&apos;Limited_Reset&apos;) == 0) {
            presenter.studentHideElements();
        }

        // === Whiteboard ===
        if (eventData.source.indexOf(&apos;UploadImage&apos;) &gt;= 0) {
            presenter.playerController.getModule(&apos;Drawing1&apos;).uploadImage();
        }
        if (eventData.source.indexOf(&apos;DownloadBoard&apos;) &gt;= 0) {
            presenter.playerController.getModule(&apos;Drawing1&apos;).downloadBoard();
        }
        if (eventData.source.indexOf(&apos;AddText&apos;) &gt;= 0) {
            var Drawing1 = presenter.playerController.getModule(&apos;Drawing1&apos;);
            Drawing1.setFont(`${presenter.whiteboardFontSize}px ${presenter.projectFontFamily}`);
            Drawing1.addText();
        }
        if (eventData.source.indexOf(&apos;FontBigger&apos;) &gt;= 0) {
            presenter.whiteboardFontSize += 10;
            presenter.whiteboardFontSize = presenter.whiteboardFontSize &lt;= 100 ? presenter.whiteboardFontSize : 100;
            presenter.playerController.getModule(&apos;Drawing1&apos;).setFont(`${presenter.whiteboardFontSize}px ${presenter.projectFontFamily}`);
        }
        if (eventData.source.indexOf(&apos;FontSmaller&apos;) &gt;= 0) {
            presenter.whiteboardFontSize -= 10;
            presenter.whiteboardFontSize = presenter.whiteboardFontSize &gt;= 10 ? presenter.whiteboardFontSize : 10;
            presenter.playerController.getModule(&apos;Drawing1&apos;).setFont(`${presenter.whiteboardFontSize}px ${presenter.projectFontFamily}`);
        }

        if (eventData.item == &quot;CUSTOM_EVENT&quot; &amp;&amp; eventData.value == &quot;ANIMATIONS_READY&quot;) {
            presenter.avatarReady();
        }

        if (eventName == &quot;ShowAnswers&quot;) {
            let gsa2 = presenter.playerController.getModule(&apos;Gradual_Show_Answer2&apos;);
            if (gsa2) gsa2.hide();
            $(&apos;#Gradual_Show_Answer2&apos;).hide();

            var tabs = presenter.playerController.getModule(&apos;Tabs1&apos;);
            if (tabs) tabs.enable();
            // poprawienie tick przy connection
            var activity, items, count = 0;
            var activityId = [];
            var modulesList = presenter.presentation.getPage(presenter.currentIndex).getModulesAsJS();
            for (var i = 0; i &lt; 100; i++) {
                if (modulesList.includes(&apos;Connection&apos; + i)) {
                    activityId.push(i);
                    count++;
                }
            }
            for (var i = 0; i &lt; count; i++) {
                activity = presenter.playerController.getModule(&apos;Connection&apos; + activityId[i]);
                items = $(activity.getView()).find(&apos;.connectionItem&apos;);
                for (var j = 0; j &lt; items.length; j++) {
                    $(items[j]).removeClass(&quot;connectionItem-wrong connectionItem-correct&quot;);
                }
            }
        }

        if (eventName == &quot;PageLoaded&quot;) {
            // let gsa2 = presenter.playerController.getModule(&apos;Gradual_Show_Answer2&apos;);
            // if (gsa2) gsa2.hide();
            // $(&apos;#Gradual_Show_Answer2&apos;).hide();

            if (presenter.showAnswerCounter[presenter.currentIndex] == true) {
                var pageProgress = presenter.playerController.getModule(&apos;Page_Progress_Panel1&apos;);
                if (pageProgress != undefined) {
                    $(pageProgress.getView()).addClass(&quot;Page_Progress_Panel_SA&quot;);
                }
                var Check_Button1 = presenter.playerController.getModule(&apos;Check_Button1&apos;);
                if (Check_Button1 != undefined) {
                    $(Check_Button1.getView()).addClass(&quot;button_check_SA&quot;);
                }
            }
            // report page (actualy last page in lesson, not necessarily report)
            if (presenter.currentIndex == presenter.pageCounter - 1) {
                var pageId, found;
                for (var i = 0; i &lt; presenter.PageAllOkArray.length; i++) {
                    if (presenter.PageAllOkArray[i] != null) {
                        pageId = presenter.presentation.getPage(i).getId();
                        var found = document.querySelector(&apos;.addon_Hierarchical_Lesson_Report [data-page-id=&quot;&apos; + pageId + &apos;&quot;]&apos;);
                        if (found != null) {
                            var found2 = found.parentElement.parentElement.parentElement.lastElementChild.firstChild;
                            if (found2) $(found2.firstChild).addClass(&apos;award&apos; + presenter.PageAllOkArray[i]);
                        }
                    }
                }
            }
        }

        // mark ANB buttons if (&quot;score eq 100%&quot; and Check button is clicked) or if (&quot;Done&quot; is pressed) on pages
        if ((eventName == &apos;PageLoaded&apos;/* || eventName == &apos;ValueChanged&apos;*/) &amp;&amp; eventData.source.indexOf(&apos;header&apos;) &lt; 0 &amp;&amp; eventData.source.indexOf(&apos;footer&apos;) &lt; 0 &amp;&amp; eventData.source.indexOf(&apos;Whiteboard&apos;) &lt; 0) {
            var page = presenter.playerController.getPresentation().getPage(presenter.currentIndex);
            if (page.isReportable()) {
                var pageId = page.getId();
                var Score = presenter.playerController.getScore().getPageScoreById(pageId);
                if (Score.score == Score.maxScore &amp;&amp; presenter.mainCheckCounter[presenter.currentIndex] &gt; 0) {
                    presenter.addANBHeaderBookmark();
                    presenter.pageDone[presenter.currentIndex] = true;
                } else {
                    presenter.removeANBHeaderBookmark();
                    presenter.pageDone[presenter.currentIndex] = false;
                }
            } else {
                var teacherContext = presenter.getTeacherContext();
                var done = presenter.playerController.getModule(&apos;finished&apos;);
                if (done) {
                    if (done.isSelected()) {
                        presenter.addANBHeaderBookmark();
                        presenter.pageDone[presenter.currentIndex] = true;
                    } else {
                        presenter.removeANBHeaderBookmark();
                        presenter.pageDone[presenter.currentIndex] = false;
                    }
                }
            }
        }

        if (eventName == &quot;PageLoaded&quot; &amp;&amp; eventData.source != &apos;header&apos; &amp;&amp; eventData.source != &apos;footer&apos;) {
            var iframe = presenter.playerController.getModule(&apos;Iframe1&apos;);
            if (iframe != undefined) {
                iframe.hide();
            }
            var teacherContext = presenter.getTeacherContext();
            if (teacherContext != undefined) {
                if (teacherContext == true) {
                    presenter.showSA();
                } else {
                    for (var i = 1; i &lt;= presenter.textNarrationCount; i++) {
                        if (presenter.playerController.getModule(&apos;show_audio_text&apos; + i) != null) {
                            presenter.playerController.getModule(&apos;show_audio_text&apos; + i).hide();
                        }
                    }
                    if (presenter.mainCheckCounter[presenter.currentIndex] &gt;= presenter.checksNumber) {
                        presenter.showSA();
                    }
                }
            }
            // change class for drawing on PageLoaded
            function changeClassForPageLoadedDrawing(buttonName) {
                var eraserButtonNames = presenter.getPageModules(buttonName).sort();
                for (name of eraserButtonNames) {
                    var eraserButton = presenter.playerController.getModule(name);
                    var idx = 1;
                    var idxArr = name.match(/\d+/);
                    if (idxArr) {
                        idx = parseInt(idxArr[0]) + 1;
                    }
                    var drawing = presenter.playerController.getModule(&apos;Drawing&apos; + idx);
                    if (drawing) {
                        if (eraserButton) {
                            if (eraserButton.isSelected()) {
                                $(drawing.getView()).addClass(&apos;Drawing_eraser&apos;);
                                $(drawing.getView()).removeClass(&apos;Drawing_marked&apos;);
                                // drawing.setEraserThickness(25);
                                // drawing.setEraserOn();
                            } else {
                                $(drawing.getView()).addClass(&apos;Drawing_marked&apos;);
                                $(drawing.getView()).removeClass(&apos;Drawing_eraser&apos;);
                                if ($(&apos;.ic_page&apos;).hasClass(&apos;highContrast&apos;)) {
                                    drawing.setColor(&apos;#ffffff&apos;);
                                }
                            }
                        }
                    }
                }
            }
            changeClassForPageLoadedDrawing(&apos;markerEraser&apos;);        // change class for drawing black
            changeClassForPageLoadedDrawing(&apos;markerEraserRed&apos;);     // change class for drawing red
            changeClassForPageLoadedDrawing(&apos;EraserMarker&apos;);        // change class for drawing yellow
            // hide Show Answers Context
            if (presenter.getHideShowAnswersContext() &amp;&amp; presenter.getHideShowAnswersCount == 0) {
                var SA = presenter.playerController.getModule(&apos;Show_Answers1&apos;);
                if (SA) SA.hide();
            }

            // === Show hint on hover === \\
            let hintButtons = presenter.getPageModules(&apos;btn_hint&apos;);
            let hints = presenter.getPageModules(&apos;window_hint&apos;);
            if (hintButtons.length != 0 &amp;&amp; hints.length != 0) {
                hintButtons.sort();
                hints.sort();
                for (let a = 0; a &lt; hintButtons.length; a++) {
                    let button = presenter.playerController.getModule(`${hintButtons[a]}`);
                    let hint = presenter.playerController.getModule(`${hints[a]}`);
                    if (button &amp;&amp; hint) {
                        button.getView().addEventListener(&apos;touchstart&apos;, showHint, true);
                        button.getView().addEventListener(&apos;touchend&apos;, hideHint, true);
                        button.getView().addEventListener(&apos;mouseenter&apos;, showHint);
                        button.getView().addEventListener(&apos;mouseleave&apos;, hideHint);
                        hint.hide();
                    };
                    function showHint() {
                        $(hint.getView()).stop(true, true).fadeIn(80);
                    };
                    function hideHint() {
                        $(hint.getView()).stop(true, true).fadeOut(80);
                    };
                };
            };

            // === Toggle &apos;explain&apos; window on click === \\
            let explainButtons = presenter.getPageModules(&apos;btn_explain&apos;);
            let explanations = presenter.getPageModules(&apos;window_explain&apos;);
            if (explainButtons.length != 0 &amp;&amp; explanations.length != 0) {
                explainButtons.sort();
                explanations.sort();
                for (let a = 0; a &lt; explainButtons.length; a++) {
                    let button = presenter.playerController.getModule(`${explainButtons[a]}`);
                    if (button) button.getView().addEventListener(&apos;click&apos;, () =&gt; { toggleExplanations(explainButtons[a]) });
                }
                function toggleExplanations(buttonName) {
                    let idx = buttonName.slice(11);
                    let btn = presenter.playerController.getModule(buttonName);
                    let exp = presenter.playerController.getModule(&apos;window_explain&apos; + idx);
                    if (exp) {
                        for (let b = 1; b &lt;= explanations.length; b++) {
                            if (idx != b) {
                                $(`#window_explain${b}`).stop(true, true).fadeOut(80);
                                $(`#btn_explain${b}`).toggleClass(&apos;explain-pressed&apos;, false);
                            };
                        };
                        let isVisible = exp.getView().style.display !== &apos;none&apos;;
                        if (isVisible) {
                            $(`#window_explain${idx}`).stop(true, true).fadeOut(80);
                            if (btn) $(btn.getView()).toggleClass(&apos;explain-pressed&apos;, false);
                        } else {
                            $(`#window_explain${idx}`).stop(true, true).fadeIn(80);
                            if (btn) $(btn.getView()).toggleClass(&apos;explain-pressed&apos;, true);
                        };
                    };
                };
            };
        };

        if (eventData.source.indexOf(&apos;close_explain&apos;) &gt;= 0) {
            let idx = eventData.source.slice(13);
            let exp = presenter.playerController.getModule(&apos;window_explain&apos; + idx);
            let btn = presenter.playerController.getModule(&apos;btn_explain&apos; + idx);
            if (exp) exp.hide();
            if (btn) $(btn.getView()).toggleClass(&apos;explain-pressed&apos;, false);
        };

        // === === === HANDWRITING PAGES === === === 

        // *** Paragraph &amp; Drawing ***

        if (eventData.source == &apos;hw_btn_draw&apos; || eventData.source == &apos;hw_btn_write&apos; || eventData.source.indexOf(&apos;hw_clr&apos;) == 0) {

            let type = eventData.source.slice(3);
            let colorButtons = presenter.getPageModules(&apos;hw_clr&apos;);
            let drawing = presenter.playerController.getModule(&apos;hw_Drawing1&apos;);
            let paragraph = presenter.playerController.getModule(&apos;hw_Paragraph1&apos;);
            let btnDraw = presenter.playerController.getModule(&apos;hw_btn_draw&apos;);
            let btnWrite = presenter.playerController.getModule(&apos;hw_btn_write&apos;);
            let data = presenter.handwritingData[presenter.currentIndex];

            if (eventData.value == &apos;1&apos;) {
                if (type == &apos;btn_draw&apos;) {
                    data.mode = &apos;draw&apos;
                    if (drawing) {
                        drawing.show();
                        colorButtons.forEach(m =&gt; presenter.playerController.getModule(m).show());
                    };
                    if (paragraph) paragraph.hide();
                    if (btnWrite) btnWrite.deselect();
                } else if (type == &apos;btn_write&apos;) {
                    data.mode = &apos;write&apos;;
                    if (drawing) {
                        drawing.hide();
                        colorButtons.forEach(m =&gt; presenter.playerController.getModule(m).hide());
                    };
                    if (paragraph) paragraph.show();
                    if (btnDraw) btnDraw.deselect();
                } else if (type.indexOf(&apos;clr_&apos;) == 0) {
                    data.mode = &apos;draw&apos;;
                    colorButtons.forEach(m =&gt; presenter.playerController.getModule(m).deselect());
                    presenter.playerController.getModule(eventData.source).select();
                    handleHandwritingDrawing();
                };
            } else if (eventData.value == &apos;0&apos;) {
                presenter.playerController.getModule(eventData.source).select();
            };
        };

        // *** Sample answer ***

        if (eventData.source == &apos;hw_btn_answer&apos;) {
            let answer = presenter.playerController.getModule(&apos;hw_txt_answer&apos;);
            if (eventData.value == &apos;1&apos;) if (answer) answer.show();
            if (eventData.value == &apos;0&apos;) if (answer) answer.hide();
        };

        // *** Submit / Yes / No ***

        if (eventData.source == &apos;Submit&apos; || eventData.source == &apos;hw_btn_yes&apos; || eventData.source == &apos;hw_btn_no&apos;) {

            let page = presenter.presentation.getPage(presenter.currentIndex);
            let submit = presenter.playerController.getModule(&apos;Submit&apos;);
            let buttonAnswer = presenter.playerController.getModule(&apos;hw_btn_answer&apos;);
            let gaps = presenter.getPageModules(&apos;hw_txt_gap&apos;);
            let hw = presenter.handwritingData[presenter.currentIndex];

            if (eventData.source == &apos;Submit&apos; &amp;&amp; eventData.value == &apos;1&apos;) {
                handleConfirmation(&apos;show&apos;);
                submit.disable();
                gaps.forEach(m =&gt; presenter.playerController.getModule(m).disableGap(1));
                presenter.lockModule(&apos;hw_Paragraph1&apos;, true);
                presenter.lockModule(&apos;hw_Drawing1&apos;, true);
            };

            if (eventData.source == &apos;hw_btn_yes&apos;) {
                handleConfirmation(&apos;hide&apos;);
                if (buttonAnswer) buttonAnswer.show();
                if (page.isReportable()) presenter.playerController.getCommands().checkAnswers();
                hw.submitted = true;
            };

            if (eventData.source == &apos;hw_btn_no&apos;) {
                handleConfirmation(&apos;hide&apos;);
                if (submit) {
                    submit.enable();
                    submit.deselect();
                };
                gaps.forEach(m =&gt; presenter.playerController.getModule(m).enableGap(1));
                hw.submitted = false;
                presenter.lockModule(&apos;hw_Paragraph1&apos;, false);
                presenter.lockModule(&apos;hw_Drawing1&apos;, false);
            };

            function handleConfirmation(value) {
                let group = [&apos;hw_btn_yes&apos;, &apos;hw_btn_no&apos;, &apos;hw_txt_confirm&apos;, &apos;hw_background&apos;];
                group.forEach(m =&gt; {
                    let mdl = presenter.playerController.getModule(m);
                    if (mdl) value == &apos;show&apos; ? mdl.show() : mdl.hide();
                });
            };
        };

        // === === === === === === === === === === === === === ===

        if (eventName == &apos;PageLoaded&apos; &amp;&amp; eventData.source.indexOf(&apos;header&apos;) == 0 &amp;&amp; eventData.source != &apos;footer&apos;) {
            presenter.studentHideElements();

            // --- TOC BUTTON ---
            var tocButton = presenter.playerController.getHeaderModule(&apos;TOC_Button&apos;);
            if (tocButton) presenter.playerController.getHeaderModule(&apos;TOC_Button&apos;).deselect();

            presenter.deselectModules(&apos;Audio_Text&apos;);
            presenter.hideTextAudioTexts(&apos;audio_text&apos;);
        }

        // --- ICONS ON SPREAD EDITOR FOR NON-REPORTABLE PAGES
        // --- REPORTABLE PAGES ARE SUPPORTED BY &apos;MN Spread Editor&apos;
        if (eventName == &apos;PageLoaded&apos; &amp;&amp; eventData.source.indexOf(&apos;header&apos;) == 0 &amp;&amp; eventData.source != &apos;footer&apos;) {
            var spreadEditor = presenter.playerController.getModule(&apos;Spread_Editor1&apos;);
            if (spreadEditor) {
                for (var i = 0; i &lt; presenter.localPagesIDs.length; i++) {
                    var page = presenter.presentation.getPage(i);
                    if (!page.isReportable()) {
                        var idx = presenter.pagesIDs.indexOf(presenter.localPagesIDs[i]);
                        if (idx &gt; -1) {
                            btn = presenter.playerController.getModule(&apos;Double_State_Button&apos; + idx);
                            if (btn) {
                                if (presenter.pageDone[i]) {
                                    btn.select();
                                } else {
                                    btn.deselect();
                                }
                            }
                        }
                    }
                }
            }
        }

        // === DONE ===
        if (eventData.source.indexOf(&apos;finished&apos;) == 0 || eventData.source.indexOf(&apos;Done&apos;) == 0) {
            if (eventData.value == &apos;1&apos;) {
                presenter.addANBHeaderBookmark();
                presenter.pageDone[presenter.currentIndex] = true;
                // added in v1.8
                presenter.enableModules(&apos;DSB_Info&apos;, &apos;Double_State_Button_Example&apos;, true);
            } else {
                presenter.removeANBHeaderBookmark();
                presenter.pageDone[presenter.currentIndex] = false;
            }
        }
        // text_identification1 === DSB_feedback &amp; TXT_feedback (change also in presenter.setShowErrorsMode) === Blocked paragraph ===
        if (eventData.source.indexOf(&apos;Done&apos;) == 0) {
            let done = presenter.playerController.getModule(&apos;Done&apos;);
            if (done) {
                let view = done.getView();
                if ($(view).hasClass(&apos;text_identification_done&apos;)) {
                    let dsb = presenter.playerController.getModule(&apos;DSB_feedback&apos;);
                    if (eventData.value == &apos;1&apos;) {
                        presenter.blockParagraphs(true);
                        if (dsb) dsb.show();
                    };
                    if (eventData.value == &apos;0&apos;) {
                        presenter.blockParagraphs(false);
                    };
                };
            };
        };

        // === TOC_Button ===
        if (eventData.source.indexOf(&apos;TOC_Button&apos;) &gt;= 0) {
            var TOC = presenter.playerController.getHeaderModule(&apos;Table_Of_Contents1&apos;).getView();
            if (eventData.value == &apos;1&apos;) {
                $(TOC).fadeIn({ duration: 200, queue: false });
            }
            if (eventData.value == &apos;0&apos;) {
                $(TOC).fadeOut({ duration: 200, queue: false });
            }
        }

        // === VIDEO SUBTITLES ===
        if (eventData.source.indexOf(&apos;dsb&apos;) == 0) {
            if (eventData.source.length == 3) {
                modul = presenter.playerController.getModule(&apos;video1&apos;);
                if (modul) {
                    if (eventData.value == &apos;1&apos;) {
                        modul.showSubtitles();
                    } else {
                        modul.hideSubtitles();
                    }
                }
            } else if (eventData.source.length &gt; 3) {
                var id = parseInt(eventData.source.slice(3), 10);
                modul = presenter.playerController.getModule(&apos;video&apos; + (id + 1));
                if (modul) {
                    if (eventData.value == &apos;1&apos;) {
                        modul.showSubtitles();
                    } else {
                        modul.hideSubtitles();
                    }
                }
            }
        }

        // === EXAMPLE ANSWER ===
        if (eventData.source.indexOf(&apos;Show_Example_Answer&apos;) &gt;= 0) {
            var idx = parseInt(eventData.source.slice(19));
            var modul = presenter.playerController.getModule(&apos;Example_Text&apos; + idx);
            if (modul) {
                if (eventData.value == &apos;1&apos;) {
                    modul.show();
                } else {
                    modul.hide();
                }
            }
        }

        // === MODEL ANSWER ===
        if (eventData.source.indexOf(&apos;ShowModelAnswer&apos;) &gt;= 0) {
            var idx = parseInt(eventData.source.slice(15));
            var modul = presenter.playerController.getModule(&apos;ModelText&apos; + idx);
            if (modul) {
                if (eventData.value == &apos;1&apos;) {
                    modul.show();
                } else {
                    modul.hide();
                }
            }
        }

        // === CHANGE CLASS FOR DRAWING
        function changeClassForDrawing(button, color, thickness, opacity) {
            var moduleIdx = eventData.source.slice(button.length);
            var idx = 0;
            if (moduleIdx) idx = parseInt(moduleIdx);
            var drawing = presenter.playerController.getModule(&apos;Drawing&apos; + (idx + 1));
            if (drawing) {
                if (eventData.value == &apos;1&apos;) {
                    drawing.setEraserThickness(25);
                    drawing.setEraserOn();
                    $(drawing.getView()).addClass(&apos;Drawing_eraser&apos;);
                    $(drawing.getView()).removeClass(&apos;Drawing_marked&apos;);
                } else {
                    drawing.setColor(color);
                    drawing.setThickness(thickness);
                    drawing.setOpacity(opacity);
                    $(drawing.getView()).addClass(&apos;Drawing_marked&apos;);
                    $(drawing.getView()).removeClass(&apos;Drawing_eraser&apos;);
                }
            }
        }
        if (eventData.source.indexOf(&apos;markerEraser&apos;) &gt;= 0) {        // BLACK DRAWING
            if ($(&apos;.ic_page&apos;).hasClass(&apos;highContrast&apos;)) {
                changeClassForDrawing(&apos;markerEraser&apos;, &apos;#ffffff&apos;, 4, 1);
            } else {
                changeClassForDrawing(&apos;markerEraser&apos;, &apos;#000000&apos;, 4, 1);
            }
        }
        if (eventData.source.indexOf(&apos;markerEraserRed&apos;) &gt;= 0) {     // RED DRAWING
            changeClassForDrawing(&apos;markerEraserRed&apos;, &apos;#ff0000&apos;, 4, 1);
        }
        if (eventData.source.indexOf(&apos;EraserMarker&apos;) &gt;= 0) {        // YELLOW DRAWING
            changeClassForDrawing(&apos;EraserMarker&apos;, &apos;#e4ff7f&apos;, 15, 0.6);
        }

        // === NEW NARRATION MODULES AND TEXT AUDIO MODULES ===
        if (eventData.source.indexOf(&apos;Audio_Text&apos;) &gt;= 0) {
            var idx = parseInt(eventData.source.slice(10));
            var modul = presenter.playerController.getModule(&apos;audio_text&apos; + idx);
            if (modul) {
                var el = modul.getView().querySelector(&apos;.textaudio-text&apos;);
                if (eventData.value == &apos;1&apos;) {
                    if (el) $(el).css({ visibility: &apos;visible&apos;, height: &apos;&apos;, margin: &apos;&apos;, padding: &apos;&apos; });
                } else {
                    if (el) $(el).css({ visibility: &apos;hidden&apos;, height: &apos;0&apos;, margin: &apos;0&apos;, padding: &apos;0&apos; });
                }
            }
        }

        // === OLD NARRATION MODULES ===
        if (eventData.source.indexOf(&apos;show_audio_text&apos;) &gt;= 0) {
            if (eventData.value == 1) {
                presenter.isTextNarrationVisible = true;
            } else {
                presenter.isTextNarrationVisible = false;
            }
            var id = parseInt(eventData.source.slice(15));
            var showAudio, closeAudio, textNarration;
            for (var i = 1; i &lt;= presenter.textNarrationCount; i++) {
                showAudio = presenter.playerController.getModule(&apos;show_audio_text&apos; + i);
                closeAudio = presenter.playerController.getModule(&apos;close_audio_text&apos; + i);
                textNarration = presenter.playerController.getModule(&apos;audio_text&apos; + i);
                if (eventData.value == &apos;1&apos;) {
                    if (i != id) {
                        if (textNarration) textNarration.hide();
                        if (closeAudio) closeAudio.hide();
                        if (showAudio) showAudio.deselect();
                    } else {
                        if (textNarration) textNarration.show();
                        if (closeAudio) closeAudio.show();
                    }
                } else if (eventData.value == 0) {
                    if (textNarration) textNarration.hide();
                    if (closeAudio) closeAudio.hide();
                }
            }
        }
        if (eventData.source.indexOf(&apos;close_audio_text&apos;) == 0) {
            presenter.isTextNarrationVisible = false;
            var audioText, closeAudioText, showAudioText;
            for (var i = 1; i &lt;= presenter.textNarrationCount; i++) {
                audioText = presenter.playerController.getModule(&apos;audio_text&apos; + i);
                closeAudioText = presenter.playerController.getModule(&apos;close_audio_text&apos; + i);
                showAudioText = presenter.playerController.getModule(&apos;show_audio_text&apos; + i);
                if (audioText) audioText.hide();
                if (closeAudioText) closeAudioText.hide();
                if (showAudioText) showAudioText.deselect()
            }
        }

        function stopAudioModules(a, b, c, d, e) {
            presenter.stopAudio(a);
            presenter.stopTextAudio(b);
            presenter.stopAudioText(c);
            presenter.stopRecorders(d);
            if (e) {
                presenter.handleDSButtons(0, &apos;deselect&apos;);
            } else {
                presenter.handleDSButtons(a, &apos;deselect&apos;);
            }
        }
        // === STANDALONE AUDIO MODULE START PLAYING ===
        if (eventData.source != &apos;header&apos; &amp;&amp; eventData.source != &apos;footer&apos; &amp;&amp; eventData.source.indexOf(&apos;Audio&apos;) == 0 &amp;&amp; eventData.value == &apos;playing&apos;) {
            var id = parseInt(eventData.source.slice(5));
            stopAudioModules(id, 0, 0, 0, eventData.source);
            var audioText, closeAudioText, showAudioText;
            if (presenter.isTextNarrationVisible) {
                for (var i = 1; i &lt;= presenter.textNarrationCount; i++) {
                    if (i != id) {
                        audioText = presenter.playerController.getModule(&apos;audio_text&apos; + i);
                        closeAudioText = presenter.playerController.getModule(&apos;close_audio_text&apos; + i);
                        showAudioText = presenter.playerController.getModule(&apos;show_audio_text&apos; + i);
                        if (audioText) audioText.hide();
                        if (closeAudioText) closeAudioText.hide();
                        if (showAudioText) showAudioText.deselect()
                    }
                }
                audioText = presenter.playerController.getModule(&apos;audio_text&apos; + id);
                closeAudioText = presenter.playerController.getModule(&apos;close_audio_text&apos; + id);
                showAudioText = presenter.playerController.getModule(&apos;show_audio_text&apos; + id);
                if (audioText) audioText.show();
                if (closeAudioText) closeAudioText.show();
                if (showAudioText) showAudioText.select()
            }
        }
        // === MEDIA_RECORDER ===
        if (eventData.source.indexOf(&apos;Media_Recorder&apos;) &gt;= 0) {
            var recorderNr = parseInt(eventData.source.slice(14));
            if (eventData.value == &apos;playing&apos; || eventData.value == &apos;start&apos;) {
                stopAudioModules(0, 0, 0, recorderNr);
            } else if (eventData.value == &apos;stop&apos;) {
            }
        }
        // === TEXT_AUDIO MODULE START PLAYING ===
        if (eventData.source.indexOf(&apos;audio_text&apos;) == 0 &amp;&amp; eventData.value == &apos;playing&apos;) {
            var audioNr = parseInt(eventData.source.slice(10), 10);
            stopAudioModules(0, 0, audioNr, 0);
        }
        if (eventData.source.indexOf(&apos;TextAudio&apos;) == 0 &amp;&amp; eventData.value == &apos;playing&apos;) {
            var audioNr = parseInt(eventData.source.slice(9), 10);
            stopAudioModules(0, audioNr, 0, 0);
        }
        // === DOUBLE_STATE_BUTTON ===
        if (eventData.source.indexOf(&apos;Double_State_Button&apos;) &gt;= 0) {
            var buttonNr = parseInt(eventData.source.slice(19));
            var button = presenter.playerController.getModule(eventData.source);
            if (button) {
                if ($(button.getView()).hasClass(&apos;Double_State_Button_Audio_Icon&apos;)) {
                    if (eventData.value == 1) {
                        stopAudioModules(buttonNr, 0, 0, 0);
                    }
                }
            }
        }

        // === PAGE PROGRESS PANEL ===
        if (presenter.mainCheckCounter &amp;&amp; presenter.mainCheckCounter[presenter.currentIndex]) {
            var page = presenter.presentation.getPage(presenter.currentIndex);
            var id = page.getId();
            var score = presenter.scoreService.getPageScoreById(id);
            if (score.maxScore &gt; 0 &amp;&amp; score.score === score.maxScore &amp;&amp; score.errorCount == 0) {
                let pppModule = presenter.playerController.getModule(&apos;Page_Progress_Panel1&apos;);
                if (pppModule) {
                    var percentageScore = (score.score * 100.0) / score.maxScore;
                    let pageScore = {
                        progress: parseInt(percentageScore, 10),
                        sumOfMaxScore: score.maxScore,
                        sumOfMistakes: score.mistakeCount,
                        sumOfErrors: score.errorCount,
                        sumOfChecks: score.checkCount,
                        sumOfScores: score.score
                    };
                    pppModule.displayScores(pageScore);
                }
            }
        }

        // === Layered Image - Page Award
        if (eventName == &apos;PageLoaded&apos; &amp;&amp; eventData.source != &apos;header&apos; &amp;&amp; eventData.source != &apos;footer&apos; &amp;&amp; eventData.source != &apos;Whiteboard&apos; &amp;&amp; typeof presenter.PageAllOkArray[presenter.currentIndex] == &apos;number&apos;) {
            var pageAward = presenter.playerController.getModule(&apos;Layered_Image1&apos;);
            if (pageAward &amp;&amp; presenter.pageDone != undefined) {
                pageAward.hideLayer(1);
                pageAward.hideLayer(2);
                var whichImg = presenter.PageAllOkArray[presenter.currentIndex];
                if (whichImg &lt; 3) pageAward.showLayer(whichImg);
                pageAward.show();
            }
        }

        // === IFRAME ===
        if (eventData.item == &apos;CUSTOM_EVENT&apos; &amp;&amp; eventData.value == &apos;ANIMATION_FINISHED&apos;) {
            var iframe = presenter.playerController.getModule(&apos;Iframe1&apos;);
            if (iframe != undefined) {
                iframe.hide();
            }
            var pageAward = presenter.playerController.getModule(&apos;Layered_Image1&apos;);
            if (pageAward &amp;&amp; !resetPressed) {
                pageAward.hideLayer(1);
                pageAward.hideLayer(2);
                var whichImg = presenter.PageAllOkArray[presenter.currentIndex];
                if (whichImg &lt; 3) pageAward.showLayer(whichImg);
                pageAward.show();
                resetPressed = false;
            }
        }

        // added in v1.9
        if (eventName == &apos;ValueChanged&apos; &amp;&amp; eventData.source != &apos;header&apos; &amp;&amp; eventData.source != &apos;footer&apos; &amp;&amp; eventData.source != &apos;Whiteboard&apos;) {
            setTimeout(() =&gt; presenter.areActivitiesCompleted(eventData));
        }

        <!-- ipad 네이버웨일 브라우저 로딩 이슈 대응 -->
        if (/Whale/.test(navigator.userAgent) &amp;&amp; /iPad/.test(navigator.platform)) {
            presenter.avatarReady();
        }
    };

    presenter.getLastVisitedPageIndex = function () {
        return lastVisitedPageIndex;
    };
    presenter.getLastVisitedPageId = function () {
        return lastVisitedPageId;
    };

    presenter.sendEventData = function (score, src) {
        let eventData = presenter.createEventData(score, src);
        if (presenter.playerController) {
            presenter.playerController.getEventBus().sendEvent(&apos;ValueChanged&apos;, eventData);
        }
    };
    presenter.createEventData = function (score, src) {
        return {
            name: src,
            source: src,
            score: score
        };
    };

    // === CHECK RESULTS ===
    presenter.setShowErrorsMode = function () {
        if (!presenter.isPopupVisible) presenter.hideModules(&apos;TXT_Popup&apos;);
        presenter.blockParagraphs(true);
        presenter.handleTextSelections(true);
        presenter.addShowAnswersClass(&apos;Connection&apos;, false);
        presenter.addShowAnswersClass(&apos;Coloring&apos;, false);

        let fdb = presenter.playerController.getModule(&apos;TXT_feedback&apos;);
        if (fdb) fdb.show();

        let gsa2 = presenter.playerController.getModule(&apos;Gradual_Show_Answer2&apos;);
        if (gsa2) gsa2.hide();
        $(&apos;#Gradual_Show_Answer2&apos;).hide();

        var id = presenter.presentation.getPage(presenter.currentIndex).getId();
        var score = presenter.scoreService.getPageScoreById(id);

        presenter.sendEventData(score.score / score.maxScore, &apos;CheckAnswers&apos;);

        // limited panel
        if (presenter.mainCheckCounter[presenter.currentIndex]) {
            presenter.mainCheckCounter[presenter.currentIndex] += 1;
        } else {
            presenter.mainCheckCounter[presenter.currentIndex] = 1;
        }
        presenter.studentHideElements();
        if (typeof presenter.PageAllOkArray[presenter.currentIndex] !== &apos;number&apos;) {
            if (score.maxScore &gt; 0 &amp;&amp; score.score === score.maxScore &amp;&amp; score.errorCount == 0) {
                presenter.pageDone[presenter.currentIndex] = true;
                if (presenter.mainCheckCounter[presenter.currentIndex] == 1) {
                    presenter.PageAllOkArray[presenter.currentIndex] = 1;
                    presenter.respond(&apos;all&apos;);
                } else if (presenter.mainCheckCounter[presenter.currentIndex] == 2) {
                    presenter.PageAllOkArray[presenter.currentIndex] = 2;
                    presenter.respond(&apos;all&apos;);
                } else {
                    presenter.PageAllOkArray[presenter.currentIndex] = 3;
                    presenter.respond(&apos;all&apos;);
                }
                var iframe = presenter.playerController.getModule(&apos;Iframe1&apos;);
                var prizeNumber = presenter.PageAllOkArray[presenter.currentIndex];
                var Audio = presenter.playerController.getFooterModule(&apos;multiAudioCheck&apos;);
                if (Audio) {
                    Audio.jumpTo(prizeNumber);
                    Audio.play();
                }
                if (iframe != undefined) {
                    iframe.show();
                    iframe.sendMessage(&apos;CUSTOM_MESSAGE&apos;, {
                        action: &apos;play&apos;,
                        anim: prizeNumber
                    });
                }
                presenter.addANBHeaderBookmark();
            } else if (presenter.mainCheckCounter[presenter.currentIndex] &gt;= presenter.checksNumber) {
                if (!presenter.playerController.getContextMetadata() || !presenter.getHideShowAnswersContext() || presenter.getHideShowAnswersOption() == 0) {
                    presenter.showSA();
                } else if (presenter.getHideShowAnswersOption() == 2 &amp;&amp; presenter.getHideShowAnswersCount() &gt; 0) {
                    presenter.showSA();
                }
                if (!presenter.limitedCheckCount[presenter.currentIndex]) {
                    presenter.limitedCheckCount[presenter.currentIndex] = [];
                }
                presenter.collectLimitedPanels(0);
                if (presenter.panelGSA) {
                    for (let i = 0; i &lt; presenter.panelGSA.length; i++) {
                        presenter.limitedCheckCount[presenter.currentIndex][i] = presenter.checksNumber;
                    }
                    for (let i = 0; i &lt; presenter.panelGSA.length; i++) {
                        presenter.playerController.getModule(presenter.panelGSA[i][1]).show();
                    }
                }
            }
        } else if (presenter.mainCheckCounter[presenter.currentIndex] &gt;= presenter.checksNumber) {
            if (!presenter.playerController.getContextMetadata() || !presenter.getHideShowAnswersContext() || presenter.getHideShowAnswersOption() == 0) {
                presenter.showSA();
            } else if (presenter.getHideShowAnswersOption() == 2 &amp;&amp; presenter.getHideShowAnswersCount() &gt; 0) {
                presenter.showSA();
            }
        }

        // added in v1.8
        presenter.enableModules(&apos;DSB_Info&apos;, &apos;Double_State_Button_Example&apos;, true);

        var pageAward = presenter.playerController.getModule(&apos;Layered_Image1&apos;);
        if (pageAward &amp;&amp; score.maxScore &gt; 0 &amp;&amp; score.score === score.maxScore &amp;&amp; score.errorCount == 0) {
            if (presenter.mainCheckCounter[presenter.currentIndex] &gt;= presenter.checksNumber) {
                presenter.showSA();
            }
            pageAward.hideLayer(1);
            pageAward.hideLayer(2);
            var whichImg = presenter.PageAllOkArray[presenter.currentIndex];
            if (whichImg &lt; 3) pageAward.showLayer(whichImg);
            pageAward.show();
        }

        // limited panel
        let pppModule = presenter.playerController.getModule(&apos;Page_Progress_Panel1&apos;);
        if (pppModule) {
            let ppp = pppModule.getView();
            ppp.querySelector(&apos;.checks&apos;).querySelector(&apos;.value&apos;).innerText = presenter.mainCheckCounter[presenter.currentIndex];
        }
    };

    presenter.respond = function (response) {
        if (presenter.isAvatarReady) {
            var Audio = presenter.playerController.getHeaderModule(&apos;multiAudioCheck&apos;);
            if (response == &apos;all&apos;) {
                var prizeNumber = presenter.PageAllOkArray[presenter.currentIndex];
                if (Audio != undefined) {
                    Audio.jumpTo(prizeNumber);
                    Audio.stop();
                    // Audio.play();
                }
            } else {
                if (Audio != undefined) {
                    Audio.stop();
                }
            }
            presenter.response = &apos;&apos;;
        } else {
            presenter.response = response;
        }
    };

    // === UNCHECK RESULTS ===
    presenter.setWorkMode = function () {
        presenter.sendEventData(&apos;&apos;, &apos;UncheckAnswers&apos;);
        if (presenter.showAnswerCounter[presenter.currentIndex] == true) {
            var Check_Button1 = presenter.playerController.getModule(&apos;Check_Button1&apos;);
            if (Check_Button1 != undefined) {
                $(Check_Button1.getView()).addClass(&quot;button_check_SA&quot;);
            }
        }
        presenter.blockParagraphs(false);
        presenter.handleTextSelections(false);
        presenter.addShowAnswersClass(&apos;Connection&apos;, false);
        presenter.addShowAnswersClass(&apos;Coloring&apos;, false);
    };

    // === RESET ===
    presenter.reset = function () {
        // added in v1.8
        presenter.disableModules(&apos;DSB_Info&apos;, &apos;Double_State_Button_Example&apos;, true);
        // added in v1.9
        presenter.resetActivitiesCompleted();

        presenter.sendEventData(&apos;&apos;, &apos;Reset&apos;);
        presenter.resetAudioscripts();
        presenter.blockParagraphs(false);

        presenter.hideModules(&apos;TXT_Popup&apos;);
        presenter.isPopupVisible = false;
        presenter.setDraggableInitialPosition();

        // Handwriting pages
        let submit = presenter.playerController.getModule(&apos;Submit&apos;);
        let hw = presenter.handwritingData[presenter.currentIndex];
        if (submit) {
            let buttonAnswer = presenter.playerController.getModule(&apos;hw_btn_answer&apos;);
            if (hw.submitted) {
                submit.select();
                submit.disable();
                if (buttonAnswer) buttonAnswer.show();
            };
        };
        presenter.handleHandwritingPage(&apos;Reset&apos;);

        // ModelViewerWLP
        let modelWLPs = presenter.pageModules.filter((module) =&gt; module.indexOf(&apos;ModelViewerWLP&apos;) == 0);
        modelWLPs.forEach((name) =&gt; {
            presenter.playerController.getModule(name).show();
        });

        let gsa2 = presenter.playerController.getModule(&apos;Gradual_Show_Answer2&apos;);
        if (gsa2) gsa2.hide();
        $(&apos;#Gradual_Show_Answer2&apos;).hide();

        setTimeout(() =&gt; presenter.studentHideElements(), 0);
        var whiteboard = presenter.playerController.getHeaderModule(&apos;whiteboard&apos;);
        var teacherContext = presenter.getTeacherContext();
        if (whiteboard &amp;&amp; !teacherContext) whiteboard.hide();

        resetPressed = true;
        var iframe = presenter.playerController.getModule(&apos;Iframe1&apos;);
        if (iframe) iframe.hide();

        // limited panel
        presenter.collectLimitedPanels(1);
        presenter.PageAllOkArray[presenter.currentIndex] = false;
        if (presenter.showAnswerCounter[presenter.currentIndex] == true) {
            var Check_Button1 = presenter.playerController.getModule(&apos;Check_Button1&apos;);
            if (Check_Button1) $(Check_Button1.getView()).addClass(&quot;button_check_SA&quot;);
        }

        // restore class for drawing
        function restoreClassForDrawing(button) {
            var eraserButtonNames = presenter.getPageModules(button).sort();
            for (var name of eraserButtonNames) {
                name = name.slice(button.length);
                var idx = 0;
                if (name) idx = parseInt(name);
                var drawing = presenter.playerController.getModule(&apos;Drawing&apos; + (idx + 1));
                if (drawing) {
                    $(drawing.getView()).addClass(&apos;Drawing_marked&apos;);
                    $(drawing.getView()).removeClass(&apos;Drawing_eraser&apos;);
                    if ($(&apos;.ic_page&apos;).hasClass(&apos;highContrast&apos;)) {
                        drawing.setColor(&apos;#ffffff&apos;);
                    }
                }
            }
        }
        restoreClassForDrawing(&apos;markerEraser&apos;);     // restore class for black drawing
        restoreClassForDrawing(&apos;markerEraserRed&apos;);  // restore class for red drawing
        restoreClassForDrawing(&apos;EraserMarker&apos;);     // restore class for yellow drawing

        // reset bookmark in ANB
        var reset = presenter.playerController.getModule(&apos;Reset1&apos;);
        if (reset &amp;&amp; !$(reset.getView()).hasClass(&apos;reset_whiteboard&apos;)) {
            let ANB = presenter.playerController.getHeaderModule(&apos;Assessments_Navigation_Bar1&apos;);
            if (ANB) ANB.removeBookmark();
            ANB = presenter.playerController.getFooterModule(&apos;Assessments_Navigation_Bar1&apos;);
            if (ANB) ANB.removeBookmark();
        }
        if (reset &amp;&amp; $(reset.getView()).hasClass(&apos;reset_whiteboard&apos;)) {
            var close = presenter.playerController.getHeaderModule(&apos;PreviousPage_Whiteboard&apos;);
            if (close) setTimeout(() =&gt; close.show(), 0);
            // if (close) close.show();
        }

        presenter.pageDone[presenter.currentIndex] = false;
        presenter.hideTextAudioTexts(&apos;audio_text&apos;);

        presenter.stopRecorders(0);
        presenter.stopTextAudio(0);
        presenter.stopAudioText(0);
        presenter.stopAudio(0);

        // presenter.mainCheckCounter[presenter.currentIndex] = 0;
        let SA = presenter.playerController.getModule(&apos;Show_Answers1&apos;);
        if (SA) SA.hide();
        // let dsbVideo = presenter.playerController.getModule(&apos;dsb_video&apos;);
        // if (dsbVideo &amp;&amp; presenter.mainCheckCounter[presenter.currentIndex] &gt;= presenter.checksNumber) dsbVideo.show();

        <!-- 다시하기 버튼 클릭 시 수식 사라지는 문제 -->
        if (!window.MathJax) return;
        // MathJax v2
        if (MathJax.Hub &amp;&amp; MathJax.Hub.Queue) {
            MathJax.Hub.Queue(["Typeset", MathJax.Hub]);
        }
        // MathJax v3
        else if (MathJax.typesetPromise) {
            MathJax.typesetPromise();
        }
    };

    presenter.goToPDFPage = function (pageNumber) {
        var data = {
            type: &apos;lesson&apos;,
            openLessonInCurrentTab: true
        };
        if (presenter.linksModel[pageNumber]) {
            data.lessonID = presenter.linksModel[pageNumber];
            var jsonData = JSON.stringify(data);
            presenter.playerController.sendExternalEvent(&apos;crossLesson&apos;, jsonData);
        } else {
            console.error(&apos;No LessonID defined for page &apos; + pageNumber + &apos; in Controller KR.&apos;)
        }
    };

    presenter.getState = function () {
        setTimeout(() =&gt; {
            let anime = presenter.playerController.getModule(&apos;Animation1&apos;);
            if (anime) anime.play();
        });
        return JSON.stringify({
            PageAllOkArray: presenter.PageAllOkArray,
            limitedCheckCount: presenter.limitedCheckCount,
            mainCheckCounter: presenter.mainCheckCounter,
            showAnswerCounter: presenter.showAnswerCounter,
            whiteboardFontSize: presenter.whiteboardFontSize,
            pageDone: presenter.pageDone,
            handwritingData: presenter.handwritingData,
            lastVisitedPageId: presenter.presentation.getPage(presenter.currentIndex).getId(),
            lastVisitedPageIndex: presenter.currentIndex
        });
    };

    presenter.setState = function (state) {
        if (state === undefined || state === &apos;&apos;) {
            presenter.PageAllOkArray = [];
            presenter.showAnswerCounter = [];
            presenter.whiteboardFontSize = 30;
            presenter.createLimitedArrays();
            presenter.pageDone = [];
            presenter.handwritingData = [];
            lastVisitedPageId = 0;
            lastVisitedPageIndex = 0;
        } else {
            var parsedState = JSON.parse(state);

            presenter.addAltAttributeToImg(false);   // fix adding &quot;alt&quot; attribute to DSB &lt;img&gt; element

            presenter.PageAllOkArray = parsedState.PageAllOkArray;
            lastVisitedPageId = parsedState.lastVisitedPageId;
            lastVisitedPageIndex = parsedState.lastVisitedPageIndex;
            if (!parsedState.mainCheckCounter) {
                presenter.mainCheckCounter = [];
            } else {
                presenter.mainCheckCounter = parsedState.mainCheckCounter;
            }
            if (!parsedState.limitedCheckCount) {
                presenter.limitedCheckCount = [];
            } else {
                presenter.limitedCheckCount = parsedState.limitedCheckCount;
            }
            presenter.showAnswerCounter = parsedState.showAnswerCounter;
            presenter.whiteboardFontSize = parsedState.whiteboardFontSize;
            presenter.pageDone = parsedState.pageDone;
            presenter.handwritingData = parsedState.handwritingData;

            // limited panels
            presenter.collectLimitedPanels(0);
            if (presenter.limitedCheckCount[presenter.currentIndex]) {
                for (let i = 0; i &lt; presenter.limitedCheckCount[presenter.currentIndex].length; i++) {
                    if (presenter.limitedCheckCount[presenter.currentIndex][i] &gt;= presenter.checksNumber) {
                        if (presenter.panelGSA[i]) {
                            presenter.playerController.getModule(presenter.panelGSA[i][1]).show();
                        }
                    }
                }
            }
        }
    };

    presenter.executeCommand = function (name, params) {
        var commands = {
            &apos;avatarReady&apos;: presenter.avatarReady,
            &apos;goToPDFPage&apos;: presenter.goToPDFPage,
            &apos;getLastVisitedPageId&apos;: presenter.getLastVisitedPageId,
            &apos;getLastVisitedPageIndex&apos;: presenter.getLastVisitedPageIndex
        };
        Commands.dispatch(commands, name, params, presenter);
    };

    // added in v1.9
    // avalable activities
    presenter.addons = {
        &apos;Choice&apos;: [{
            selector: &apos;.ic_choice&apos;,
            method:   &apos;isAttempted()&apos;,
        }],
        &apos;multiplegap&apos;: [{
            selector: &apos;div.multiplegap_placeholders&apos;,
            method:   &apos;isAttempted()&apos;,
        }],
        // &apos;text_identification&apos;: [{
        //     selector: &apos;div.text-identification-container&apos;,
        //     method:   &apos;isSelected()&apos;,
        // }],
        &apos;Table&apos;: [
            { selector: &apos;input.mathGap&apos; },
            { selector: &apos;input[type=&quot;text&quot;]:not(input.mathGap)&apos; },
            { selector: &apos;select&apos; },
            { selector: &apos;span.ui-droppable&apos; },
        ],
        &apos;Text&apos;: [
            { selector: &apos;input.mathGap&apos; },
            { selector: &apos;input[type=&quot;edit&quot;]&apos; },
            { selector: &apos;select&apos; },
            { selector: &apos;span.ui-droppable&apos; },
        ],
        &apos;TrueFalse&apos;: [{
            selector: &apos;tr &gt; td.last&apos;,
            method:   &apos;&apos;,
        }],
        &apos;Connection&apos;: [{
            selector: &apos;td.connectionLeftColumn&apos;,
            method:   &apos;isAttempted()&apos;,
        }],
    };
    presenter.addonsClickable = {};
    presenter.gaps = {};
    presenter.collectClickableElements = function () {
        // is page reportable
        let page = presenter.presentation.getPage(presenter.currentIndex);
        if (!page.isReportable()) return;

        // get page title
        const pageTitle = presenter.playerController.getPageTitle();
        if (pageTitle.indexOf(&apos;H11&apos;) != 0 &amp;&amp; pageTitle.indexOf(&apos;H12&apos;) != 0) return;

        $(&apos;#Check_Button1&apos;).css({ &apos;opacity&apos;: 0.5, &apos;pointer-events&apos;: &apos;none&apos; });

        // collect page avtivity addons
        let names = Object.keys(presenter.addons);
        let activities = [];
        for (const name of names) {
            let activity = presenter.getPageModules(name);
            if (activity &amp;&amp; activity.length) activities.push(activity);
        }
        activities = activities.flat().filter(el =&gt; names.includes(el.replace(/\d/g, &apos;&apos;)));

        function findClosestParentAddon (element) {
            while (element) {
                element = element.closest(&apos;[id]&apos;);
                if (element) {
                    if (activities.includes(element.id)) {
                        return element;
                    } else {
                        element = element.parentElement;
                    }
                }
            }
            return null;
        }

        // OBSERVER for MathJax gaps
        let id = [];
        let gapID = {};
        let targetNode;
        const config = { childList: true, subtree: true };
        const callback = (mutationList, observer) =&gt; {
            for (const mutation of mutationList) {
                const input = mutation.target.querySelector(&apos;input&apos;);
                if (input &amp;&amp; !id.includes(input.id)) {
                    let closestParent = findClosestParentAddon(input);
                    if (closestParent) {
                        let elements = Object.keys(presenter.addonsClickable);
                        if (elements.includes(closestParent.id) &amp;&amp; !presenter.addonsClickable[closestParent.id].mathGap) return;

                        id.push(input.id);
                        gapID[closestParent.id].push(input.id);

                        presenter.addonsClickable[closestParent.id] = { clickable: gapID[closestParent.id].length, clicked: 0, mathGap: true};
                        presenter.handleCheckAnswers();
                    }
                }
            }
        };
        const observer = new MutationObserver(callback);

        for (const activity of activities) {
            gapID[activity] = [];
            targetNode = document.querySelector(`#${activity}`);
            observer.observe(targetNode, config);
            setTimeout(() =&gt; observer.disconnect(), 30000);
        }

        // collect clickable elements
        for (const activity of activities) {
            presenter.gaps[activity] = {};
            const selectors = presenter.addons[activity.replace(/\d/g, &apos;&apos;)];
            if (selectors) {
                presenter.addonsClickable[activity] = { clickable: 0, clicked: 0, mathGap: false};
                for (const selector of selectors) {
                    let $el = $(`#${activity}`).find(selector.selector);
                    let isDisabled = $el.attr(&apos;disabled&apos;) == &apos;disabled&apos;;
                    if ($el.length &amp;&amp; !isDisabled) {
                        $el.each((idx, el) =&gt; {
                            if (findClosestParentAddon(el).id == activity) {
                                presenter.addonsClickable[activity].clickable++;
                            }
                        });
                    }
                }
                if (presenter.addonsClickable[activity].clickable == 0) delete presenter.addonsClickable[activity];
            }
        }
        presenter.handleCheckAnswers();
    };
    presenter.resetActivitiesCompleted = function () {
        let elements = Object.values(presenter.addonsClickable);
        elements.forEach(el =&gt; el.clicked = 0);
        let modules = Object.keys(presenter.addonsClickable);
        modules.forEach(modul =&gt; presenter.gaps[modul] = {});
        presenter.handleCheckAnswers();
    };
    presenter.areActivitiesCompleted = function (eventData) {
        // is page reportable
        let page = presenter.presentation.getPage(presenter.currentIndex);
        if (!page.isReportable()) return;

        // get page title
        const pageTitle = presenter.playerController.getPageTitle();
        if (pageTitle.indexOf(&apos;H11&apos;) != 0 &amp;&amp; pageTitle.indexOf(&apos;H12&apos;) != 0) return;

        if (eventData &amp;&amp; eventData.source != &apos;Reset&apos;) {
            if (eventData.source == &apos;header&apos; || eventData.source == &apos;footer&apos;) return;

            const moduleName = eventData.source.replace(/\d/g, &apos;&apos;);
            if (!Object.keys(presenter.addons).includes(moduleName)) return;

            let command, isClicked = false;
            switch (moduleName) {
                case &apos;Choice&apos;:
                case &apos;Connection&apos;:
                case &apos;multiplegap&apos;:
                    command = `presenter.playerController.getModule(&apos;${eventData.source}&apos;).${presenter.addons[moduleName][0].method}`;
                    isClicked = eval(command);
                    if (isClicked) {
                        presenter.addonsClickable[eventData.source].clicked = 1;
                    } else {
                        presenter.addonsClickable[eventData.source].clicked = 0;
                    }
                    break;
                case &apos;text_identification&apos;:
                    if (eventData.item == &apos;all&apos;) {
                        command = `presenter.playerController.getModule(&apos;${eventData.source}&apos;).${presenter.addons[moduleName][0].method}`;
                        isClicked = eval(command);
                        presenter.addonsClickable[eventData.source].clicked = 1;
                    } else {
                        presenter.addonsClickable[eventData.source].clicked = 0;
                    }
                    break;
                case &apos;TrueFalse&apos;:
                    let count = 0;
                    let rows = new Array($(`#${eventData.source} tr:not(:first-child)`).length).fill(0);
                    $(`#${eventData.source} tr:not(:first-child)`).each((idx, el) =&gt; {
                        let down = $(el).find(&apos;td.down&apos;);
                        if (down.length &gt; 0) {
                            rows[idx] = 1;
                        } else {
                            rows[idx] = 0;
                        }
                        count = rows.reduce((acc, curr) =&gt; acc + curr, 0);
                    });
                    presenter.addonsClickable[eventData.source].clicked = count;
                    break;
                case &apos;Table&apos;:
                case &apos;Text&apos;:
                    presenter.addonsClickable[eventData.source].clicked = 0;
                    let $ids = $(`#${eventData.source}`).find(&apos;[id]&apos;);
                    let $item = $ids.filter((idx, el) =&gt; el.id.slice(7) == eventData.item);
                    let itemId = $item.attr(&apos;id&apos;);
                    let tagName = $item.prop(&apos;tagName&apos;);
                    if (eventData.value) {
                        if (tagName == &apos;SELECT&apos; &amp;&amp; eventData.value != &apos;---&apos;) {
                            presenter.gaps[eventData.source][itemId] = 1
                        } else if (tagName != &apos;SELECT&apos;) {
                            presenter.gaps[eventData.source][itemId] = 1;
                        } else {
                            presenter.gaps[eventData.source][itemId] = 0;
                        }
                    } else {
                        presenter.gaps[eventData.source][itemId] = 0;
                    }
                    gapsFilled = Object.values(presenter.gaps[eventData.source]).reduce((acc, curr) =&gt; acc + curr, 0);
                    presenter.addonsClickable[eventData.source].clicked = gapsFilled;
                    break;
            }

            presenter.handleCheckAnswers();
        }
    };

    presenter.handleCheckAnswers = function () {
        let elements = Object.values(presenter.addonsClickable);
        let elementsClicked = elements.reduce((acc, curr) =&gt; acc + curr.clicked, 0);
        let elementsToClick = elements.reduce((acc, curr) =&gt; acc + curr.clickable, 0);
        if (elementsToClick == elementsClicked) {
            $(&apos;#Check_Button1&apos;).css({ &apos;opacity&apos;: 1, &apos;pointer-events&apos;: &apos;all&apos; });
        } else {
            $(&apos;#Check_Button1&apos;).css({ &apos;opacity&apos;: 0.5, &apos;pointer-events&apos;: &apos;none&apos; });
        }
        console.log(&apos;\nelements =&apos;, elementsToClick, elementsClicked);
    };

    // presenter.destroy = function (event) {
    //     // presenter.view.removeEventListener(&apos;DOMNodeRemoved&apos;, presenter.destroy);
    //     // if (presenter.playerController &amp;&amp; !presenter.playerController.isPlayerInCrossDomain()) {
    //     //     $(window.parent.document).unbind(&apos;scroll&apos;);
    //     // }
    // };

    return presenter;
}</presenter></addon>
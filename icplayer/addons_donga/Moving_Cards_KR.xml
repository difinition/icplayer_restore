<?xml version="1.0" encoding="utf-8"?><addon id="Moving_Cards_KR"><metadata/><model><property displayName="" name="Cards" type="list"><property displayName="" isDefault="false" isLocalized="false" name="Image" type="image"/><property displayName="" isDefault="false" isLocalized="false" name="Caption" type="html"/><property displayName="" isDefault="false" isLocalized="false" name="Text ID" type="string"/><property displayName="" isDefault="false" isLocalized="false" name="Limited Check ID" type="string"/></property><property displayName="Previewed card number" isDefault="false" isLocalized="false" name="Previewed card number" type="string" value="1"/><property displayName="Card background color" isDefault="false" isLocalized="false" name="Card background color" type="string" value="#FFFFFF"/><property displayName="Max image height" isDefault="false" isLocalized="false" name="Max image height" type="string" value="66"/><property displayName="Border radius" isDefault="false" isLocalized="false" name="Border radius" type="string" value="15"/><property displayName="" isDefault="false" isLocalized="false" name="Previous button" type="string"/><property displayName="" isDefault="false" isLocalized="false" name="Next button" type="string"/><property displayName="Show counter" isDefault="false" isLocalized="false" name="Show counter" type="boolean" value="false"/></model><resources/><css>:root { 
    --transitionTime: 0.35s;
    --containerProperty: left;
    --cardProperty: 'opacity', 'transform';
  }

.moving-cards {
    display: inline-flex;
    position:relative !important;
    left:0px;
    align-items: center;
    justify-content: flex-start;
    transition-property: var(--containerProperty);
    transition-duration: var(--transitionTime);
}

[class^=&quot;mv-card&quot;] {
    display: inline-flex;
    flex-direction: column;
    align-items:center;
    margin-left:10px !important;
    margin-right:10px !important;
    box-shadow: 0 0 20px 5px lightgrey;
    transition-property: var(--cardProperty);
    transition-duration: var(--transitionTime);
    opacity:0%;
    transform:scale(0.7);
    pointer-events:none;
}

.mv-card1 {
    opacity:100%;
    transform:scale(1);
    pointer-events:auto;
}

.mv-card2 {
    opacity:50%;
    transform:scale(0.9);
}

.mv-card3 {
    opacity:25%;
    transform:scale(0.8);
}

.mv-img {
    object-fit: contain;
    position:relative !important;
    max-width:90%;
}

.mv-caption {
    position:relative !important;
    width:90%;
}

.mv-container {
    display:inline-flex;
    justify-content:center;
    align-items:center;
    height:auto;
    max-width:90%;
    flex-wrap:wrap;
}

.mv-gap {
    position:relative !important;
    left: 0px !important;
    top: 0px !important;
    height:auto !important;
    width:auto !important;
}

.mv-buttons-container {
    display: flex;
    position: relative !important;
    justify-content: space-between;
    left: 10px !important;
}

.mv-counter-container {
    position: absolute;
    width: 100%;
    top: -35px;
    text-align: center;
}</css><view>&lt;div class=&quot;moving-cards&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;mv-buttons-container&quot;&gt;
&lt;/div&gt;</view><preview>&lt;div class=&quot;moving-cards&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;mv-buttons-container&quot;&gt;
&lt;/div&gt;</preview><presenter>function AddonMoving_Cards_KR_create(){
			
	var presenter = function(){}
    
    presenter.setPlayerController = function (controller) {
        presenter.playerController = controller;
        presenter.eventBus = controller.getEventBus();
        presenter.eventBus.addEventListener('ValueChanged', this);
        presenter.eventBus.addEventListener('ShowAnswers', this);
        presenter.eventBus.addEventListener('HideAnswers', this);
        presenter.eventBus.addEventListener('PageLoaded', this);
    };

    presenter.run = function(view, model){
		presenter.view = view;
        presenter.$view = $(view);
        presenter.model = model;
        
        presenter.pos = 0;
        presenter.left = 0;       
        presenter.cardWidth = (parseInt(presenter.view.style.width)-20);
        presenter.cardHeight = parseInt(presenter.view.style.height);
        presenter.cards = presenter.model['Cards'];
        presenter.previewedCard = presenter.model['Previewed card number'];
        presenter.cardColor = presenter.model['Card background color'];
        presenter.imgHeight = presenter.model['Max image height'];
        presenter.borderRadius = presenter.model['Border radius'];
        presenter.previousButton = presenter.model['Previous button'];
        presenter.nextButton = presenter.model['Next button'];
        presenter.hasCounter = ModelValidationUtils.validateBoolean(model['Show counter']);
        presenter.cardParts = presenter.setCardParts();

        presenter.createCards(view, presenter.cardParts);
        presenter.appendCounter();
        
	}
    
    presenter.createCards = function(view, parts) {

        let reg = /[!&quot;#$%&amp;'()*+,./:;&lt;=&gt;?@[\\\]^`{|}~]/;
        let prev = presenter.previousButton;
        let next = presenter.nextButton;

        if (parts == '' || parts == undefined || parts == null) {
            presenter.model.isVisible = 'false'; 
            return;
        } else if (parts == 'InvalidID') {
            presenter.model.isVisible = 'false';
            return;
        } else if (prev == '' || next == '' || prev == next || reg.test(prev) || reg.test(next)) {
            presenter.model.isVisible = 'false';
            return;
        } else {

            let prevModule = presenter.playerController.getModule(prev);
            let nextModule = presenter.playerController.getModule(next);

            if (!prevModule || !nextModule) {
                presenter.model.isVisible = 'false';
                return;
            } else {
                                
                for (let a=1; a&lt;=presenter.cards.length; a++) {
                    
                    let image = presenter.cards[a-1]['Image'];
                    let caption = presenter.cards[a-1]['Caption'];
                    let textID = presenter.cards[a-1]['Text ID'];
                    let checkID = presenter.cards[a-1]['Limited Check ID'];

                    let movingCards = presenter.view.querySelector('.moving-cards');
                    
                    // Card
                    let card = document.createElement('div');
                    card.style.height = presenter.cardHeight+'px';
                    card.style.width = presenter.cardWidth+'px';
                    card.style.borderRadius = parseInt(presenter.borderRadius)+'px';
                    card.style.justifyContent = 'space-around';
                    if (presenter.cardColor != '' &amp;&amp; presenter.isColor(presenter.cardColor)) {
                        card.style.backgroundColor = presenter.cardColor;
                    } else {
                        card.style.backgroundColor = '#FFFFFF';
                    }
                    card.className = 'mv-card'+a;
                    $(card).attr('number',a);
                    
                    let cardMargin = parseInt(presenter.cardWidth*0.05)+'px';

                    movingCards.append(card);
                    
                    // Image
                    if (parts.indexOf('Image') &gt;= 0) {
                        let img = document.createElement('img');
                        img.src = image;
                        if ((presenter.isNumber(presenter.imgHeight)) &amp;&amp; (presenter.imgHeight != '')) {
                            img.style.maxHeight = parseInt(presenter.imgHeight)+'%';
                        } else {
                            img.style.maxHeight = '66%';
                        }
                        img.style.marginTop = cardMargin;
                        img.style.marginBottom = cardMargin;
                        let innerImgBorder = (parseInt(card.style.borderRadius) - parseInt(cardMargin));
                        if (innerImgBorder &lt; 6) {innerImgBorder = 5};
                        img.style.borderRadius = innerImgBorder+'px';
                        img.className = 'mv-img';

                        card.append(img);
                    }

                    // Caption
                    if (parts.indexOf('Caption') &gt;= 0) {
                        if (!parts === 'Caption') {
                            card.style.justifyContent = 'space-between';
                        }
                        let cpt = document.createElement('div');
                        cpt.innerHTML = caption;
                        cpt.style.marginBottom = cardMargin;
                        cpt.className = 'mv-caption';

                        card.append(cpt);
                    }

                    // Text ID
                    if (parts.indexOf('TextID') &gt;= 0) {
                        let gapModule = presenter.playerController.getModule(textID);
                        if (!gapModule) { presenter.model.isVisible = 'false' } else {
                            card.style.justifyContent = 'space-between';
                            let container = document.createElement('div');
                            container.className = 'mv-container';
                            container.style.marginBottom = cardMargin;
                            container.style.rowGap = cardMargin;
                            container.style.columnGap = cardMargin;
                            
                            card.append(container);
                            
                            let gap = gapModule.getView();
                            gap.className = 'mv-gap';
                            
                            container.append(gap);

                            // Limited Check ID
                            if (parts.indexOf('LimitedCheckID') &gt;= 0) {
                                let checkModule = presenter.playerController.getModule(checkID);
                                if (!checkModule ) { presenter.model.isVisible = 'false' } else {
                                    let check = checkModule.getView();
                                    
                                    container.append(check);
                                    
                                    check.setAttribute('style', `position: relative !important; left: 0px !important; top: 0px !important; flex-shrink:0;`);
                                }
                            }
                        }
                    }               
                }

                // Previous and Next buttons
                let prevView = prevModule.getView();
                let nextView = nextModule.getView();

                prevView.setAttribute('style', `position: relative !important; left: 0px !important; top: 0px !important;`);
                nextView.setAttribute('style', `position: relative !important; left: 0px !important; top: 0px !important;`);

                let buttonsContainer = presenter.view.querySelector('.mv-buttons-container');
                buttonsContainer.style.width = parseInt(presenter.cardWidth) + 'px';
                buttonsContainer.style.top = parseInt(presenter.cardHeight*0.05) + 'px';

                buttonsContainer.append(prevView);
                buttonsContainer.append(nextView);

            }
        }
    }

    // EVENTS
    presenter.onEventReceived = function (eventName, eventData) {
        //console.log('event name: ' + eventName + '\nevent source: ' + eventData.source + '\nevent value: ' + eventData.value + '\nevent item: ' + eventData.item);
        
        if (eventData.source == undefined) return;
       
        // Move cards to the right
        if (eventData.source.indexOf(presenter.nextButton) == 0) {
            
            if (presenter.pos == presenter.cards.length - 1) { return } else {
                
                let movingCards = presenter.view.querySelector('.moving-cards');
                presenter.pos = presenter.pos + 1;
                presenter.left = (presenter.left - (presenter.cardWidth + 20));
                movingCards.style.left = presenter.left+'px';
                
                presenter.setCardClasses(presenter.view);
                presenter.updateCounter();

            }

        }

        // Move cards to the left
        if (eventData.source.indexOf(presenter.previousButton) == 0) {

            if (presenter.pos == 0) { return } else {
                
                let movingCards = presenter.view.querySelector('.moving-cards');
                presenter.pos = presenter.pos - 1;
                presenter.left = (presenter.left + (presenter.cardWidth + 20));
                movingCards.style.left = presenter.left+'px';
                
                presenter.setCardClasses(presenter.view);
                presenter.updateCounter();

            }

        }

        // Set position on PageLoaded
        if (eventName == 'PageLoaded' &amp;&amp; eventData.source.indexOf('header') &lt; 0 &amp;&amp; eventData.source.indexOf('footer') &lt; 0) {
            
            if (presenter.cardParts != '' &amp;&amp; presenter.cardParts != 'InvalidID') {

                presenter.cardWidth = (parseInt(presenter.view.style.width) - 20);
                presenter.left = (presenter.pos) * - (presenter.cardWidth + 20);

                let cssRoot = document.querySelector(':root');
                let movingCards = presenter.view.querySelector('.moving-cards');

                presenter.setAnimations(cssRoot, false);

                movingCards.style.left = presenter.left + 'px';
                
                presenter.setCardClasses(presenter.view);
                presenter.updateCounter();

                setTimeout(function() {
                    presenter.setAnimations(cssRoot, true);
                }, 0);
                
            }

        }

    }

    presenter.setAnimations = function(root, boolean) {
        if (boolean === true) {
            root.style.setProperty('--transitionTime','0.35s');
            root.style.setProperty('--containerProperty','left');
            root.style.setProperty('--cardProperty','opacity, transform');
        } else if (boolean === false) {
            root.style.setProperty('--transitionTime','none');
            root.style.setProperty('--containerProperty','none');
            root.style.setProperty('--cardProperty','none');
        }
    }

    presenter.setCardClasses = function(addon) {
        for (let a=0; a&lt;presenter.cards.length; a++) {
            let cardDiv = addon.querySelectorAll('[class*=&quot;mv-card&quot;')[a];
            if (cardDiv) {
                if (a == presenter.pos) {
                    cardDiv.className = 'mv-card1';
                }
                if ((a == presenter.pos+1) || (a == presenter.pos-1)) {
                    cardDiv.className = 'mv-card2';
                }
                if ((a == presenter.pos+2) || (a == presenter.pos-2)) {
                    cardDiv.className = 'mv-card3';
                }
                if ((a &gt;= presenter.pos+3) || (a &lt;= presenter.pos-3)) {
                    cardDiv.className = 'mv-card-0';
                }
            }
        }
    }

    presenter.setCardParts = function() {
        let card = {
            images : presenter.isItem(presenter.cardItems('Image')),
            captions : presenter.isItem(presenter.cardItems('Caption')),
            textIDs : presenter.isItem(presenter.cardItems('Text ID')),
            checkIDs : presenter.isItem(presenter.cardItems('Limited Check ID')),
        }

        let cardParts = '';
        if (card.images == 1) cardParts += 'Image';
        if (card.captions == 1) cardParts += 'Caption';
        if ((cardParts.indexOf('Image') &gt;= 0) || (cardParts.indexOf('Caption') &gt;= 0)) {
            if (card.textIDs == 1) cardParts += 'TextID';
        }
        if ((cardParts.indexOf('TextID') &gt;= 0) &amp;&amp; (cardParts.indexOf('Image') &gt;= 0 || cardParts.indexOf('Caption')) &gt;= 0) {
            if (card.checkIDs == 1) cardParts += 'LimitedCheckID';
        }
        if (presenter.isDuplicated(presenter.cardItems('Text ID')) || presenter.isDuplicated(presenter.cardItems('Limited Check ID'))) {
            cardParts = 'InvalidID';
        }
        return cardParts;
    }

    presenter.cardItems = function(item) {
        let array = [];
        if (item == 'Image') {
            for (let a=1; a&lt;=presenter.cards.length; a++) {
                if (presenter.cards[a-1][`${item}`].replace(/(&lt;([^&gt;]+)&gt;)/gi, &quot;&quot;) == '') {
                    array.push('');
                } else if (presenter.cards[a-1][`${item}`] == undefined) {
                    break;
                } else {
                    array.push(presenter.cards[a-1][`${item}`]);
                }
            }
        } else if (item == 'Caption') {
            for (let a=1; a&lt;=presenter.cards.length; a++) {
                if (presenter.cards[a-1][`${item}`].replace(/(&lt;([^&gt;]+)&gt;)/gi, &quot;&quot;) == '') {
                    array.push('');
                } else if (presenter.cards[a-1][`${item}`] == undefined) {
                    break;
                } else {
                    array.push(presenter.cards[a-1][`${item}`]);
                }
            }
        } else {
            for (let a=1; a&lt;=presenter.cards.length; a++) {
                if ((presenter.cards[a-1][`${item}`].replace(/(&lt;([^&gt;]+)&gt;)/gi, &quot;&quot;) == '') || (presenter.cards[a-1][`${item}`] == undefined)) {
                    break;
                } else {
                    array.push(presenter.cards[a-1][`${item}`]);
                }
            }
        }
        return array;
    }

    presenter.isItem = function(array) {
        if (array.length &gt; 0) {
            return true;
        } else {
            return false;
        }
    }

    presenter.isDuplicated = function(array) {
        return new Set(array).size !== array.length;
    }

    presenter.isNumber = function(property) {
        let regex = /^[1-9]\d*$/;
        return regex.test(property);
    }

    presenter.isColor = function(color) {
        let rgba = /^rgba\((\d{1,3}), (\d{1,3}), (\d{1,3}), (0(\.\d{1,2})?|1(\.0)?)\)$/;
        let hex = /^#([0-9a-fA-F]{3}|[0-9a-fA-F]{6})$/;
        if ((rgba.test(color) == true) || (hex.test(color) == true)) {
            return true;
        } else {
            return false;
        }
    }

    presenter.setMessage = function(message) {
        presenter.view.textContent = message;
        presenter.view.style.textAlign = 'center';
    }

    presenter.appendCounter = function(property) {
        if (presenter.hasCounter) {
            let counter = document.createElement('div');
            counter.className = 'mv-counter-container';
            presenter.view.prepend(counter);
            presenter.updateCounter();
        }
    }

    presenter.updateCounter = function() {
        if (presenter.hasCounter) {
            let counter = presenter.view.querySelector('.mv-counter-container');
            if (counter !== undefined) {
                counter.innerText = `${presenter.pos + 1}/${presenter.cards.length}`;
            }
        }
    }

    presenter.createPreview = function(view, model) {
        presenter.view = view;
        presenter.$view = $(view);
        presenter.model = model;

        presenter.pos = 0;
        presenter.left = 0;
        presenter.cardWidth = (parseInt(presenter.view.style.width)-20);
        presenter.cardHeight = parseInt(presenter.view.style.height);
        presenter.cards = presenter.model['Cards'];
        presenter.previewedCard = presenter.model['Previewed card number'];
        presenter.cardColor = presenter.model['Card background color'];
        presenter.imgHeight = presenter.model['Max image height'];
        presenter.borderRadius = presenter.model['Border radius'];
        presenter.previousButton = presenter.model['Previous button'];
        presenter.nextButton = presenter.model['Next button'];
        presenter.hasCounter = ModelValidationUtils.validateBoolean(model['Show counter']);
        
        presenter.cardParts = presenter.setCardParts();
        presenter.previewCards(view, presenter.cardParts);
        presenter.appendCounter();

    };

    presenter.previewCards = function(view, parts) {

        let reg = /[!&quot;#$%&amp;'()*+,./:;&lt;=&gt;?@[\\\]^`{|}~]/;
        let prev = presenter.previousButton;
        let next = presenter.nextButton;

        let editor = document.querySelector('.ic_page.ic_main');

        if (parts == '' || parts == undefined || parts == null) {
            presenter.setMessage('Add new items to create cards. \'Image\' or \'Caption\' field is required.');
            return;
        } else if (parts == 'InvalidID') {
            presenter.setMessage('At least one \'Text ID\' or \'Limited Check ID\' is duplicated.');
            return;
        } else if (prev == '' || next == '') {
            presenter.setMessage('\'Previous button\' and \'Next button\' fields cannot be empty.');
            return;
        } else if (prev == next) {
            presenter.setMessage('\'Previous button\' and \'Next button\' fields cannot be the same.');
            return;
        } else {

            if (reg.test(prev) || !editor?.querySelector(`[id=&quot;${prev}&quot;`) || editor?.querySelector(`[id=&quot;${prev}&quot;`).style.opacity == '0') {
                presenter.setMessage('Invalid \'Previous button\' ID');
                return;
            } else if (reg.test(next) || !editor?.querySelector(`[id=&quot;${next}&quot;`) || editor?.querySelector(`[id=&quot;${next}&quot;`).style.opacity == '0') {
                presenter.setMessage('Invalid \'Next button\' ID');
                return;
            } else {

                for (let a=1; a&lt;=presenter.cards.length; a++) {

                    let image = presenter.cards[a-1]['Image'];
                    let caption = presenter.cards[a-1]['Caption'];
                    let textID = presenter.cards[a-1]['Text ID'];
                    let checkID = presenter.cards[a-1]['Limited Check ID'];

                    let movingCards = presenter.view.querySelector('.moving-cards');
                    if (movingCards == null) return;

                    // Card
                    let card = document.createElement('div');
                    card.style.height = presenter.cardHeight+'px';
                    card.style.width = presenter.cardWidth+'px';
                    card.style.borderRadius = parseInt(presenter.borderRadius)+'px';
                    card.style.justifyContent = 'space-around';
                    if (presenter.cardColor != '' &amp;&amp; presenter.isColor(presenter.cardColor)) {
                        card.style.backgroundColor = presenter.cardColor;
                    } else {
                        card.style.backgroundColor = '#FFFFFF';
                    }
                    card.className = 'mv-card'+a;
                    $(card).attr('number',a);
                    
                    let cardMargin = parseInt(presenter.cardWidth*0.05)+'px';

                    movingCards.append(card);
                    
                    // Image
                    if (parts.indexOf('Image') &gt;= 0) {
                        let img = document.createElement('img');
                        img.src = image;
                        if ((presenter.isNumber(presenter.imgHeight)) &amp;&amp; (presenter.imgHeight != '')) {
                            img.style.maxHeight = parseInt(presenter.imgHeight)+'%';
                        } else {
                            img.style.maxHeight = '66%';
                        }
                        img.style.marginTop = cardMargin;
                        img.style.marginBottom = cardMargin;
                        let innerImgBorder = (parseInt(card.style.borderRadius) - parseInt(cardMargin));
                        if (innerImgBorder &lt; 6) {innerImgBorder = 5};
                        img.style.borderRadius = innerImgBorder+'px';
                        img.className = 'mv-img';

                        card.append(img);
                    }
                    
                    // Caption
                    if (parts.indexOf('Caption') &gt;= 0) {
                        if (!parts === 'Caption') {
                            card.style.justifyContent = 'space-between';
                        }
                        let cpt = document.createElement('div');
                        cpt.innerHTML = caption;
                        cpt.style.marginBottom = cardMargin;
                        cpt.className = 'mv-caption';

                        card.append(cpt);
                    }

                    // Text ID
                    if (parts.indexOf('TextID') &gt;= 0) {
                        card.style.justifyContent = 'space-between';
                        if (editor) {
                            let gapModule = editor?.querySelector(`[id=&quot;${textID}&quot;`);
                            if (!gapModule || gapModule.style.opacity == '0') {
                                presenter.setMessage('Invalid ID of Text module.');
                                return;
                            } else if (gapModule) {
                                
                                let gapNode = gapModule.cloneNode(true);
                                gapNode.setAttribute('style','position:relative !important; left: 0px !important;top: 0px !important; height:auto !important;width:auto !important;');
                                gapModule.style.opacity = '0';

                                let container = document.createElement('div');
                                container.className = 'mv-container';
                                container.style.marginBottom = cardMargin;
                                container.style.rowGap = cardMargin;
                                container.style.columnGap = cardMargin;
                                
                                card.append(container);

                                container.append(gapNode);

                                // Limited Check ID
                                if (parts.indexOf('LimitedCheckID') &gt;= 0) {
                                    let checkModule = editor?.querySelector(`[id=&quot;${checkID}&quot;`);
                                    if (!checkModule || checkModule.style.opacity == '0') {
                                        presenter.setMessage('Invalid ID of Limited Check module.');
                                        return;
                                    } else if (checkModule) {

                                        let checkNode = checkModule.cloneNode(true);
                                        checkNode.setAttribute('style', 'position: relative !important; left: 0px !important; top: 0px !important; flex-shrink:0;');
                                        checkModule.style.opacity = '0';

                                        container.append(checkNode);

                                    }
                                }

                            }
                        }
                    }
                }
                
                // Previous and Next buttons
                let prevModule = editor?.querySelector(`[id=&quot;${prev}&quot;`);
                let nextModule = editor?.querySelector(`[id=&quot;${next}&quot;`);

                let prevNode = prevModule.cloneNode(true);
                let nextNode = nextModule.cloneNode(true);

                prevModule.style.opacity = '0';
                nextModule.style.opacity = '0';

                prevNode.setAttribute('style', `position: relative !important; display: inline-flex; left: 0px !important; top: 0px !important;`);
                nextNode.setAttribute('style', `position: relative !important; display: inline-flex; left: 0px !important; top: 0px !important;`);

                let buttonsContainer = presenter.view.querySelector('.mv-buttons-container');
                buttonsContainer.style.width = parseInt(presenter.cardWidth) + 'px';
                buttonsContainer.style.top = parseInt(presenter.cardHeight*0.05) + 'px';
                
                buttonsContainer.append(prevNode);
                buttonsContainer.append(nextNode);
                
            }
            
            // Preview card different than 1
            if (presenter.isNumber(presenter.previewedCard)) {
                if ((presenter.previewedCard &gt; presenter.cards.length) || (presenter.previewedCard == 1)) { return } else {
                    for (let a = 1; a &lt;= presenter.cards.length; a++) {
                        if (a == 1) {
                            let number = parseInt(presenter.previewedCard);
                            let previewedCard = $(view).find(`[number*=&quot;${number}&quot;`)[0];
                            let firstCard = $(view).find(`[number*=&quot;${a}&quot;`)[0];
                            previewedCard.className = 'mv-card'+a;
                            previewedCard.style.order = a;
                            firstCard.className = 'mv-card'+(a+1);
                            firstCard.style.order = (a+1);
                        } else if ((a &gt; 1) &amp;&amp; (a &lt; presenter.previewedCard)) {
                            let currentCard = $(view).find(`[number*=&quot;${a}&quot;`)[0];
                            currentCard.className = 'mv-card'+(a+1);
                            currentCard.style.order = (a+1);
                        } else if (a != presenter.previewedCard) {
                            let currentCard = $(view).find(`[number*=&quot;${a}&quot;`)[0];
                            currentCard.style.order = (a+1);
                        }
                    }
                }   
            }
        }
    }

    presenter.setShowErrorsMode = function () { };

    presenter.setWorkMode = function () { };

    presenter.showAnswers = function () { };

    presenter.hideAnswers = function () { };

    presenter.reset = function () { 
        let cssRoot = document.querySelector(':root');
        let movingCards = presenter.view.querySelector('.moving-cards');

        presenter.setAnimations(cssRoot, false);

        presenter.left = 0;
        presenter.pos = 0;
        movingCards.style.left = presenter.left+'px';

        presenter.setCardClasses(presenter.view);
        presenter.updateCounter();

        setTimeout(function() {
            presenter.setAnimations(cssRoot, true);
        }, 0);
    }

	presenter.getState = function(){
		return JSON.stringify({
            pos: presenter.pos,
            left: presenter.left,
        });
    }

	presenter.setState = function(state){
        let parsedState = JSON.parse(state);

        presenter.pos = parsedState.pos;
        presenter.left = parsedState.left;
	}

	return presenter;
}</presenter></addon>
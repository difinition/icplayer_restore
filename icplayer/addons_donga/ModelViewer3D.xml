<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="ModelViewer3D" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
    <model>
        <property name="model" nameLabel="Model_Viewer_model" type="file"/>
        <property name="poster" nameLabel="Model_Viewer_poster" type="file"/>
        <property name="annotations" nameLabel="Model_Viewer_annotations" type="text"/>
        <property name="environmentImage" nameLabel="Model_Viewer_environmentImage" type="image"/>
        <property name="skyboxImage" nameLabel="Model_Viewer_skyboxImage" type="image"/>
        <property name="shadowIntensity" nameLabel="Model_Viewer_shadowIntensity" type="string" value="0"/>
        <property name="shadowSoftness" nameLabel="Model_Viewer_shadowSoftness" type="string" value="1"/>
        <property name="autoRotate" nameLabel="Model_Viewer_autoRotate" type="boolean"/>
        <property name="scale" nameLabel="Model_Viewer_scale" type="string" value="1"/>
        <property name="labelsEnabled" nameLabel="Model_Viewer_labelsEnabled" type="boolean" value="True"/>
        <property name="altText" nameLabel="Model_Viewer_altText" type="string"/>
        <property name="attributes" nameLabel="Model_Viewer_attributes" type="text"/>
        <property name="copyInfo" nameLabel="Model_Viewer_copyInfo" type="html"/>
        <property name="interactionPrompt" nameLabel="Model_Viewer_interactionPrompt" type="boolean" value="True"/>
<!--        <property name="{library}" nameLabel="Model_Viewer_library" type="module-script" value="/file/serve/5059308589809664"/>-->
        <property name="{library}" nameLabel="Model_Viewer_library" type="module-script" value="../libs/modelviewer3D"/>
    </model>
<css>.md-webcam {
    display: none;
    position: absolute;
    width: 100%;
    height: 100%;
    object-fit: cover;
}

model-viewer {
    user-select: none;
    width: 100%;
    height: 100%;
    background-color: transparent !important;
}

model-viewer::part(default-progress-bar) {
    background-color: #2196F3;
}

.buttonsContainer {
    position: absolute;
    top: 25px;
    left: auto;
    right: 25px;
}

.copyButton {
    position: absolute;
}

.copyMessage {
    display: none;
    position: absolute;
    top: 0;
    bottom: 75px;
    left: 0;
    right: 0;
    background-color: rgba(0, 0, 0, 0.2);
}

.copyMessage-visible {
    display: block;
}

.copyContainer {
    position: absolute;
    top: 100%;
    left: 50%;
    margin: -170px 0 0 -300px;
    padding: 40px;
    text-align: center;
    width: 520px;
    height: auto;
    max-height: 220px;
    overflow-y: auto;
    background: #fff;
    border-radius: 5px;
    box-shadow: 0px 3px 5px 1px rgba(0, 0, 0, 0.5);
    z-index: 1;
}

.copyButton,
.labelsButton {
    width: 75px;
    height: 50px;
    background-color: #78909C;
    margin-bottom: 10px;
}

.copyButton-selected,
.labelsButton-selected {
    background-color: #0A8DBD;
}

.Hotspot {
    background: #fff;
    border-radius: 32px;
    border: 0;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.25);
    box-sizing: border-box;
    cursor: pointer;
    height: 24px;
    padding: 8px;
    position: relative;
    transition: opacity 0.3s;
    width: 24px;
}

.Hotspot:not([data-visible]) {
    background: transparent;
    border: 4px solid #fff;
    box-shadow: none;
    height: 32px;
    pointer-events: none;
    width: 32px;
}

.Hotspot:focus {
    border: 4px solid rgb(0, 128, 200);
    height: 32px;
    outline: none;
    width: 32px;
}

.Hotspot &gt; * {
    opacity: 1;
    transform: translateY(-50%);
}

.HotspotAnnotation {
    background: #fff;
    border-radius: 4px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.25);
    color: rgba(0, 0, 0, 0.8);
    display: block;
    font-family: Futura, Helvetica Neue, sans-serif;
    font-size: 18px;
    font-weight: 700;
    left: calc(100% + 1em);
    max-width: 200px;
    overflow-wrap: break-word;
    padding: 0.5em 1em;
    position: absolute;
    top: 50%;
    width: max-content;
}

.Hotspot:not([data-visible]) &gt; * {
    opacity: 0.5;
    pointer-events: none;
    transform: translateY(calc(-50% + 4px));
    transition: transform 0.3s, opacity 0.3s;
}

.hidden {
    visibility: hidden
}

.error {
    text-align: center;
    color: red;
}
</css><view>&lt;model-viewer
alt=""
src=""
ar
environment-image=""
skybox-image=""
poster=""
shadow-intensity=""
camera-controls
touch-action="pan-y"
vr&gt;
&lt;/model-viewer&gt;
&lt;div class="copyMessage"&gt;&lt;/div&gt;
&lt;div class="buttonsContainer"&gt;
    &lt;div class="labelsButton"&gt;&lt;/div&gt;
    &lt;div class="copyButton"&gt;&lt;/div&gt;
&lt;/div&gt;
</view><preview>&lt;model-viewer
alt=""
src=""
ar
environment-image=""
skybox-image=""
poster=""
shadow-intensity=""
camera-controls
touch-action="pan-y"&gt;
&lt;/model-viewer&gt;
&lt;div class="copyMessage"&gt;&lt;/div&gt;
&lt;div class="buttonsContainer"&gt;
    &lt;div class="labelsButton"&gt;&lt;/div&gt;
    &lt;div class="copyButton"&gt;&lt;/div&gt;
&lt;/div&gt;
</preview><presenter>function AddonModelViewer3D_create() {
    // to create version on mauthor-dev use storage.googleapis URL
    var presenter = function() {};

    presenter.wasInitiated = false;
    presenter.annotationsVisibility = "visible";
    presenter.isVisibleOnStart = true;
    presenter.areAnnotationsVisibleOnStart = true;

    presenter.run = function(view, model){
        if(!presenter.wasInitiated) {
            presenter.init(view, model);
        }
    };

    presenter.createPreview = function(view, model){
        if(!presenter.wasInitiated) {
            presenter.init(view, model);
            presenter.disableEvents();
        }
    };

    presenter.init = function(view, model) {
        presenter.$view = $(view);
        presenter.configuration = presenter.validateModel(model);
        presenter.isVisibleOnStart = presenter.configuration.isVisible;

        if (!presenter.configuration.isValid) {
            showErrorMessage();
            return;
        }

        presenter.modelViewer = presenter.$view.find("model-viewer").get(0);

        presenter.handleAttributes();
        presenter.setAnnotations();
        presenter.setAutoRotation();
        presenter.setInteractionPrompt();
        presenter.handleButtons();
        presenter.handleCopyright();

        $(presenter.modelViewer).on('load', function(){
            if(presenter.configuration.scale !== undefined &amp;&amp; presenter.configuration.scale !== "") presenter.setScale(presenter.configuration.scale);
        });

        presenter.wasInitiated = true;
    };

    presenter.validateModel = function (model) {
        let isValid = true;
        let additionalAttributes;
        const isVisible = ModelValidationUtils.validateBoolean(model["Is Visible"]);
        const isAutoRotate = ModelValidationUtils.validateBoolean(model["autoRotate"]);
        const areLabelsEnabled = ModelValidationUtils.validateBoolean(model["labelsEnabled"]);
        const isInteractionPrompt = ModelValidationUtils.validateBoolean(model["interactionPrompt"]);
        const environmentImage = model["environmentImage"] === "" ? "neutral" : model["environmentImage"];
        try {
            if (model["attributes"].trim() !== "") {
                additionalAttributes = JSON.parse(model["attributes"].trim());
            }
        } catch (e) {
            isValid = false;
        }

        return {
            isValid: isValid,
            isVisible: isVisible,
            addonID: model["ID"],
            model: model["model"],
            poster: model["poster"],
            annotations: model["annotations"].trim(),
            environmentImage: environmentImage,
            skyboxImage: model["skyboxImage"],
            shadowSoftness: model["shadowSoftness"],
            shadowIntensity: model["shadowIntensity"],
            autoRotate: isAutoRotate,
            scale: model["scale"],
            labelsEnabledOnStart: areLabelsEnabled,
            altText: model["altText"],
            additionalAttributes: additionalAttributes,
            copyInfo: model["copyInfo"],
            interactionPrompt: isInteractionPrompt
        };
    };

    presenter.handleAttributes = function () {
        $(presenter.modelViewer).attr("src", presenter.configuration.model);
        $(presenter.modelViewer).attr("poster", presenter.configuration.poster);
        $(presenter.modelViewer).attr("skybox-image", presenter.configuration.skyboxImage);
        $(presenter.modelViewer).attr("environment-image", presenter.configuration.environmentImage);
        $(presenter.modelViewer).attr("shadow-intensity", presenter.configuration.shadowIntensity);
        $(presenter.modelViewer).attr("shadow-softness", presenter.configuration.shadowSoftness);
        $(presenter.modelViewer).attr("alt", presenter.configuration.altText);

        presenter.addAttributesFromModel();
    };

    presenter.addAttributesFromModel = function () {
        if (!presenter.configuration.additionalAttributes) {
            return;
        }

        const attributes = presenter.configuration.additionalAttributes;

        Object.keys(attributes).forEach(key =&gt; {
            $(presenter.modelViewer).attr(key, attributes[key]);
        });
    };

    presenter.setAnnotations = function () {
        $(presenter.modelViewer).append(presenter.configuration.annotations);
        presenter.configuration.labelsEnabledOnStart ? presenter.showAnnotations() : presenter.hideAnnotations();
        presenter.areAnnotationsVisibleOnStart = presenter.annotationsVisibility === 'visible';
    };

    presenter.setAutoRotation = function () {
        if (presenter.configuration.autoRotate) {
            $(presenter.modelViewer).attr("auto-rotate", true);
        }
    };

    presenter.setInteractionPrompt = function () {
        presenter.configuration.interactionPrompt ? $(presenter.modelViewer).attr("interaction-prompt", "auto") : $(presenter.modelViewer).attr("interaction-prompt", "none");
    };

    presenter.handleButtons = function () {
        presenter.labelsButton = presenter.$view.find(".labelsButton").get(0);
        presenter.copyButton = presenter.$view.find(".copyButton").get(0);
        presenter.copyMessage = presenter.$view.find(".copyMessage").get(0);

        presenter.handleDisplayingButtons();

        presenter.configuration.labelsEnabledOnStart ? $(presenter.labelsButton).addClass("labelsButton-selected") : $(presenter.labelsButton).removeClass("labelsButton-selected");

        $(presenter.labelsButton).on("click", function (e) {
            $(presenter.labelsButton).toggleClass("labelsButton-selected");
            $(presenter.labelsButton).hasClass("labelsButton-selected") ? presenter.showAnnotations() : presenter.hideAnnotations();
        });
    };

    presenter.handleCopyright = function () {
        const copyText = '&lt;div class="copyContainer"&gt;'+presenter.configuration.copyInfo+'&lt;/div&gt;';
        $(presenter.copyMessage).append(copyText);

        presenter.copyContainer = $(presenter.copyMessage).find(".copyContainer").get(0);
        const link = presenter.copyContainer.querySelector('a');
        if (link) {
            link.addEventListener('click', function(event) {
                event.preventDefault();
                window.open(link.getAttribute('href'), '_blank');
            });
        }

        $( presenter.copyButton ).on( "click", function(e) {
            $(presenter.copyButton).toggleClass("copyButton-selected");
            $(presenter.copyMessage).toggleClass("copyMessage-visible");
        });
    };

    presenter.handleDisplayingButtons = function () {
        if(presenter.configuration.annotations === "") {
            $( presenter.labelsButton ).addClass("hidden");
        }

        if( presenter.configuration.copyInfo === "") {
            $( presenter.copyButton ).addClass("hidden");
        }
    };
    
    presenter.disableEvents = function () {
        $(presenter.modelViewer).css('pointer-events', 'none');
    };

    presenter.setScale = function(scale){
        presenter.modelViewer.scale = scale+" "+scale+" "+scale;
    };

    presenter.showAnnotations = function() {
        if (!presenter.configuration.isVisible) { return; }
        presenter.setAnnotationsVisibility("visible");
        $(presenter.labelsButton).addClass("labelsButton-selected");
    };

    presenter.hideAnnotations = function(){
        presenter.setAnnotationsVisibility("hidden");
        $(presenter.labelsButton).removeClass("labelsButton-selected");
    };

    presenter.setAnnotationsVisibility = function(value) {
        $(presenter.modelViewer).find(".Hotspot").css("visibility", value);
        presenter.annotationsVisibility = value;
    };

    presenter.getAnnotationsVisibility = function(){
        return presenter.annotationsVisibility;
    };

    presenter.executeCommand = function(name, params) {
        var commands = {
            'show': presenter.show,
            'hide': presenter.hide,
            'showAnnotations': presenter.showAnnotations,
            'hideAnnotations': presenter.hideAnnotations,
            'getAnnotationsVisibility': presenter.getAnnotationsVisibility,
            'setScale': presenter.setScale
        };
        Commands.dispatch(commands, name, params, presenter);
    };

    presenter.setShowErrorsMode = function() {};

    presenter.setWorkMode = function() {};

    presenter.reset = function () {
        if (presenter.isVisibleOnStart !== presenter.configuration.isVisible) {
            presenter.isVisibleOnStart ? presenter.show() : presenter.hide();
        }

        // set annotations visibility to default
        presenter.areAnnotationsVisibleOnStart ? presenter.showAnnotations() : presenter.hideAnnotations();

        if ($(presenter.copyButton).hasClass("copyButton-selected")) {
            $(presenter.copyButton).removeClass("copyButton-selected");
            $(presenter.copyMessage).removeClass("copyMessage-visible");
        }

        // handle animation
        presenter.setAnimationToDefault();
    };

    presenter.getErrorCount = function(){
        return 0;
    };

    presenter.getMaxScore = function(){
        return 0;
    };

    presenter.getScore = function(){
        return 0;
    };

    presenter.changeAnimation = function(animation) {
        $(presenter.modelViewer).attr("animation-name", animation);
    };

    presenter.play = function(repetitions, pingpong) {
        presenter.modelViewer.play(repetitions, pingpong);
    };

    presenter.pause = function() {
        presenter.modelViewer.pause();
    };

    presenter.listAnimations = function() {
        return presenter.modelViewer.availableAnimations;
    };

    presenter.jumpTo = function(time) {
        presenter.modelViewer.currentTime = time;
    };

    presenter.isPaused = function() {
        return presenter.modelViewer.paused;
    };

    presenter.animationDuration = function() {
        return presenter.modelViewer.duration;
    };

    presenter.changeSpeed = function(speed) {
        presenter.modelViewer.timeScale = speed;
    };

    presenter.userPrompt = function(value) {
        $(presenter.modelViewer).attr("interaction-prompt", value);
    };

    presenter.currentTime = function() {
        return presenter.modelViewer.currentTime;
    };

    presenter.getState = function() {
        return JSON.stringify({
            annotationsVisibility: presenter.annotationsVisibility,
            isVisible: presenter.configuration.isVisible,
            isPlaying: !presenter.isPaused(),
            selectedAnimation: $(presenter.modelViewer).attr("animation-name"),
            animationTime: presenter.modelViewer.currentTime
        });
    };

    presenter.setState = function(stateString){
        if (ModelValidationUtils.isStringEmpty(stateString)) return;

        var state = JSON.parse(stateString);
        presenter.annotationsVisibility = state.annotationsVisibility;

        presenter.annotationsVisibility === "visible" ? presenter.showAnnotations() : presenter.hideAnnotations();

        if (state.isVisible) {
            presenter.show();
        } else {
            presenter.hide();
        }

        presenter.handleAnimationState(state);
    };

    presenter.handleAnimationState = function (state) {
        $(presenter.modelViewer).attr("animation-name", state.selectedAnimation);

        setTimeout(function () {
            state.isPlaying ? presenter.play() : presenter.pause();
            presenter.jumpTo(state.animationTime);
        }, 100);
    };

    presenter.show = function() {
        presenter.setVisibility(true);
        presenter.configuration.isVisible = true;
        if (presenter.annotationsVisibility === "visible") {
            presenter.showAnnotations();
        }
    };

    presenter.hide = function() {
        presenter.setVisibility(false);
        presenter.configuration.isVisible = false;
        $(presenter.modelViewer).find(".Hotspot").css("visibility", "hidden");
    };

    presenter.setVisibility = function(isVisible) {
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");
    };

    presenter.setAnimationToDefault = function () {
        const animations = presenter.listAnimations();
        const userSelectedAnimations = presenter.getUserSelectedAnimation();
        const isAutoplay = presenter.getAutoplayStatus();
        if (userSelectedAnimations) {
            presenter.changeAnimation(userSelectedAnimations);
        } else if (animations.length) {
            presenter.changeAnimation(animations[0]);
        }

        presenter.jumpTo(0);

        if (isAutoplay) {
            presenter.modelViewer.play();
        } else {
            presenter.pause();
        }
    };

    presenter.getUserSelectedAnimation = function () {
        if (presenter.configuration.additionalAttributes &amp;&amp; presenter.configuration.additionalAttributes.hasOwnProperty('animation-name')) {
            return presenter.configuration.additionalAttributes['animation-name'];
        }
    };

    presenter.getAutoplayStatus = function () {
        if (presenter.configuration.additionalAttributes &amp;&amp; presenter.configuration.additionalAttributes.hasOwnProperty('autoplay')) {
            return presenter.configuration.additionalAttributes['autoplay'];
        }

        return false;
    };

    function showErrorMessage() {
        presenter.$view.addClass('error');
        presenter.$view.html("Additional Attributes must be in JSON format.");
    }

    return presenter;
}
</presenter></addon>
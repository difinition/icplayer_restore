<?xml version="1.0" encoding="UTF-8"?><addon id="Rulers_KR"><metadata></metadata><model><property displayName="SVG images" type="list" name="Images"><property isLocalized="false" type="string" displayName="Layout" isDefault="false" name="Layout"></property><property isLocalized="false" type="image" displayName="Ruler" isDefault="false" name="Image1"></property><property isLocalized="false" type="image" displayName="Protractor" isDefault="false" name="Image2"></property><property isLocalized="false" type="image" displayName="Setsquare" isDefault="false" name="Image3"></property></property><property isLocalized="false" type="boolean" displayName="Open all rulers" isDefault="false" name="OpenAllRulers"></property></model><resources></resources><css>:root {
    --ruler_tooltip_back: rgb(255 255 255 / 90%);
    --ruler_selected: rgb(202 202 202 / 90%);
    --ruler_drag_border: rgb(0 0 0 / 20%);
    --ruler_drag_background: rgb(255 255 255 / 70%);
}

.error_container .message {
    position: absolute;
    color: red;
}

.ruler_wrapper {
    display: flex;
    width: 200px;
    height: 50px;
    z-index: 1001;
}

.ruler_button {
    width: 50px;
    height: 50px;
    background-position: center;
    background-repeat: no-repeat;
    cursor: pointer;
    z-index: 1002;
}
.ruler_button {
    background-image: url('resources/../../../resources/wb_panel_rullers_icon.svg');
}
.ruler_button.selected {
    background-image: url('resources/../../../resources/wb_panel_rullers_icon-active.svg');
}
.ruler_button:hover,
.ruler_button.selected,
.ruler_image:hover,
.ruler_image.selected {
    background-color: var(--ruler_selected);
}

.ruler_button:hover::after {
    content: 'Rulers';
    display: block;
    position: absolute;
    top: -30px;
    left: -6px;
    font-size: 0.9em;
    padding: 3px 8px;
    background-color: var(--ruler_tooltip_back);
}

[class*='ruler_image'] {
    width: 50px;
    height: 50px;
    text-align: center;
    background-position: center;
    background-repeat: no-repeat;
    cursor: pointer;
}
.ruler_panel {
    display: flex;
    width: auto;
    z-index: 1001;
}
.ruler_panel.hidden {
    display: none;
}
.ruler_image_1 {
    background-image: url('resources/../../../resources/wb_panel_ruller1_icon.svg');
}
.ruler_image_2 {
    background-image: url('resources/../../../resources/wb_panel_ruller3_icon.svg');
}
.ruler_image_3 {
    background-image: url('resources/../../../resources/wb_panel_ruller2_icon.svg');
}

.ruler_container {
    position: absolute;
    width: 0;
    height: 0;
    top: 0;
    left: 0;
    pointer-events: none;
    cursor: default;
    z-index: 1000;
}
.ruler_container.hidden {
    display: none;
}
.ruler_draggable {
    position: absolute;
    width: 770px;
}
.ruler_draggable.hidden {
    visibility: hidden;
}
.ruler_rotate .active_area {
    cursor: grab;
}
.ruler_rotate.rotating .active_area {
    cursor: grabbing;
}
.ruler_drag,
#ruler_drag_2 {
    position: absolute;
    width: 40px;
    height: 40px;
    border: 1px solid var(--ruler_drag_border);
    border-radius: 50%;
    top: calc(50% - 21px);
    left: calc(50% - 21px);
    background-color: var(--ruler_drag_background);
    cursor: move;
}
#ruler_rotate_2 {
    height: 770px;
}
#ruler_rotate_2 svg {
    height: auto;
}
.ruler_drag,
.ruler_rotate .active_area {
    pointer-events: all;
}
.ruler_draggable.hidden .ruler_drag,
.ruler_draggable.hidden .ruler_rotate .active_area {
    pointer-events: none;
}</css><view>&lt;div class="ruler_wrapper"&gt;
    &lt;div class="error_container"&gt;
        &lt;div class="message"&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ruler_button"&gt;&lt;/div&gt;
    &lt;div class="ruler_panel hidden"&gt;
        &lt;div class="ruler_image ruler_image_1"&gt;&lt;/div&gt;
        &lt;div class="ruler_image ruler_image_2"&gt;&lt;/div&gt;
        &lt;div class="ruler_image ruler_image_3"&gt;&lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;</view><preview>&lt;div class="ruler_wrapper"&gt;
    &lt;div class="error_container"&gt;
        &lt;div class="message"&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ruler_button"&gt;&lt;/div&gt;
    &lt;div class="ruler_panel"&gt;
        &lt;div class="ruler_image ruler_image_1"&gt;&lt;/div&gt;
        &lt;div class="ruler_image ruler_image_2"&gt;&lt;/div&gt;
        &lt;div class="ruler_image ruler_image_3"&gt;&lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;</preview><presenter>function AddonRulers_KR_create() {

    var presenter = function () { };

    let rulerButtonSelected = false;
    let rulerImageSelected = [false, false, false];

    let imageBeingRotated;
    let mouseStartAngle;
    let imageStartAngle;
    let rotateStyle = {};
    let dragStyle = {};
    let rulerData = {};
    let rotateAngle = { ruler_rotate_1: 0, ruler_rotate_2: 0, ruler_rotate_3: 0 };
    let layouts = [];
    let currentLayout;
    let openAllRulers;

    presenter.playerController = null;
    presenter.eventBus = null;

    let errorMessages = {
        invalidFile: 'Invalid SVG file',
        svgSupportMissing: 'Your browser doesn\'t support SVG',
        xmlSerializerNotSupported: 'XmlSerializer not supported',
        missingFile: 'Please provide SVG file',
        noImages: 'At least one SVG should be added',
        noLayout: 'Layout name should not be empty',
        noMatch: 'Every layout should be filled in'
    };

    presenter.setPlayerController = function (controller) {
        // before "presenter.run" in "present" mode
        presenter.playerController = controller;
        presenter.eventBus = controller.getEventBus();
        // presenter.eventBus.addEventListener('PageLoaded', this);
    };
    presenter.setCurrentLayoutName = function (layoutName) {
        // before "presenter.run" in both "present" mode and editor
        currentLayout = layoutName;
    };
    presenter.setPreviewPageIds = function (ids) {
        // before "presenter.run" in editor only
    };

    presenter.createPreview = function (view, model) {
        presenter.logic(view, model, true);
    };

    presenter.run = function (view, model) {
        console.log('Rulers v1.0');
        presenter.logic(view, model, false);
    };

    presenter.logic = function (view, model, isPreview) {
        presenter.isVisible = ModelValidationUtils.validateBoolean(model['Is Visible']);

        presenter.$icPage = $(view).parent('.ic_page');

        presenter.$view = $(view);
        presenter.$wrapper = presenter.$view.find('.ruler_wrapper');
        presenter.$button = presenter.$view.find('.ruler_button');
        presenter.$panel = presenter.$view.find('.ruler_panel');

        openAllRulers = ModelValidationUtils.validateBoolean(model['OpenAllRulers']);

        if (!isPreview) getLayoutNames();

        createRulerContainer();
        presenter.$rulerContainer = presenter.$icPage.find('.ruler_container');
        $('.ruler_rotate').on('mouseup touchend', stopRotate);

        // collecting svg from properites
        model['Images'].forEach(imgs =&gt; {
            rulerData[imgs['Layout']] = { image_1: imgs['Image1'], image_2: imgs['Image2'], image_3: imgs['Image3'] };
        });

        if (!rulerData[currentLayout]) rulerData[currentLayout] = { image_1: '', image_2: '', image_3: '' };

        if (!isPreview) {
            for (const layout of layouts) {
                if (!rulerData[layout]) rulerData[layout] = { image_1: '', image_2: '', image_3: '' };
            }
        }

        // adding svg from css
        $('.ruler_rotate').each((idx, el) =&gt; {
            const url = $(el).css('background-image');
            if (url &amp;&amp; url != 'none') {
                const sanitizeUrl = getURLFromAbsolutePath(url);
                rulerData[currentLayout][`image_${idx + 1}`] = sanitizeUrl;
                $(el).attr('style', 'background-image: none !important');
            }
        });

        Object.values(rulerData[currentLayout]).forEach((img, idx) =&gt; createSVGElement(img, idx));

        if (!isPreview) presenter.addEventHandlers();

        presenter.setVisibility(presenter.isVisible);
    };

    function getURLFromAbsolutePath(absolutePath) {
        const regExp = new RegExp(".*\\.com(\\/)file");
        const urlMatch = absolutePath.match(regExp);
        if( urlMatch != null ){
            const startURLIndex = urlMatch[0].lastIndexOf('/');
            const endURLIndex = absolutePath.lastIndexOf('"');

            return absolutePath.slice(startURLIndex, endURLIndex);
        }else{
            // 이석웅 예외처리
            var fileName = absolutePath;
            fileName = fileName.split('url("')[1]
            fileName = fileName.split('")')[0];
            return fileName;
        }
    }

    presenter.onError = function (msg) {
        const $errorContainer = presenter.$wrapper.find('.error_container');
        $errorContainer.find('.message').html(msg);
        $errorContainer.show();
    };

    function getLayoutNames() {
        let layoutObj = presenter.playerController.getResponsiveLayouts();
        Object.values(layoutObj).forEach((obj) =&gt; layouts.push(obj.name));
    }

    // UWAGA: linijki mają podziałkę niezgodną z rzeczywistymi wymiarami =&gt; należy zmienić szerokość ".ruler_draggable"
    function createRulerContainer() {
        if (presenter.$icPage.find('.ruler_container').length) return;

        let str = '&lt;div class="ruler_container"&gt;';
        let top = presenter.$view.position().top + 60;
        let left = presenter.$view.position().left;
        for (let i = 1; i &lt;= 3; i++) {
            str += `&lt;div id="ruler_${i}" class="ruler_draggable hidden" style="left: ${left}px; top: ${top}px;"&gt;
                &lt;div id="ruler_rotate_${i}" class="ruler_rotate" style="transform: rotate(0deg);"&gt;&lt;/div&gt;
                &lt;div id="ruler_drag_${i}" class="ruler_drag"&gt;&lt;/div&gt;
            &lt;/div&gt;`;
        }
        str += '&lt;/div&gt;';
        presenter.$icPage.append(str);
    }

    function createSVGElement(img, idx) {
        if (img != '') {
            presenter.loadSVGFile(img);
        } else {
            presenter.$panel.find(`.ruler_image_${idx + 1}`).hide();
        }
    }
    presenter.loadSVGFile = function (file) {
        const sanitizeUrl = window.xssUtils.sanitize(file);
        $.ajax({
            url: sanitizeUrl,
            success: presenter.onLoadComplete,
            error: presenter.onLoadError,
            dataType: 'xml'
        });
    };
    presenter.onLoadComplete = function (data) {
        let el = $(data).find('svg');
        if (el.length === 0) {                      // validate response
            presenter.onError(errorMessages.invalidFile);
            return;
        }

        let cw = el.attr('width') ? el.attr('width') : containerWidth;
        let ch = el.attr('height') ? el.attr('height') : containerHeight;
        cw = cw.replace('px', '');                  // fit size of svg
        ch = ch.replace('px', '');
        el.attr('viewBox', '0 0 ' + cw + ' ' + ch);
        el.attr('width', '100%');
        el.attr('height', '100%');

        let rulerSvgImage = {
            ruler: '#ruler_rotate_1',
            protractor: '#ruler_rotate_2',
            setsquare: '#ruler_rotate_3'
        };

        let $draggable = presenter.$icPage.find(rulerSvgImage[el[0].id]);
        let svgHtml = presenter.xmlToString(data);  // convert xml to string
        if (svgHtml === false) {
            presenter.onError(errorMessages.xmlSerializerNotSupported);
        } else {
            $draggable.append(svgHtml);             // add converted content
            presenter.initRuler(rulerSvgImage[el[0].id]);
        }

    };
    presenter.xmlToString = function (xml) {
        let output = false;
        try {                                       // Gecko-based browsers, Safari, Opera
            output = new XMLSerializer().serializeToString(xml);
        } catch (e) {
            try {                                   // Internet Explorer
                output = xml.xml;
            } catch (e2) {                          // Xmlserializer not supported
                return false;
            }
        }
        return output;
    };
    presenter.onLoadError = function () {
        presenter.onError(errorMessages.invalidFile);
    };

    presenter.initRuler = function (id) {
        $('.ruler_draggable').draggable({ handle: '.ruler_drag', start: startDrag });
        $('.ruler_draggable').on('mouseup touchend', stopDrag);

        let $activeArea = $(id).find('.active_area');
        $(id).data('currentRotation', rotateAngle[id.substring(1)]);
        $activeArea.on('mousedown touchstart', startRotate);
    };
    function startDrag(e) {
        if (imageBeingRotated) return false;
    }
    function stopDrag(e) {
        let $style = $(e.target).parent().style();
        dragStyle[e.target.id] = {
            left: $style.left,
            top: $style.top
        };
    }
    function startRotate(e) {
        imageBeingRotated = this.closest('.ruler_rotate');
        $(imageBeingRotated).addClass('rotating');

        // [alt] key pressed - horizontal position
        if (e.altKey) {
            e.preventDefault();
            $(imageBeingRotated).css({ transform: 'rotate(0rad)' });
            $(imageBeingRotated).data('currentRotation', 0);
            return;
        }

        let imageCentre = getImageCentre(imageBeingRotated);
        let mouseStartXFromCentre = e.originalEvent.pageX - imageCentre[0];
        let mouseStartYFromCentre = e.originalEvent.pageY - imageCentre[1];
        mouseStartAngle = Math.atan2(mouseStartYFromCentre, mouseStartXFromCentre);

        imageStartAngle = $(imageBeingRotated).data('currentRotation');

        $(imageBeingRotated).on('mousemove touchmove', rotateImage);

        return false;
    }
    function stopRotate(e) {
        if (!imageBeingRotated) return;

        $(imageBeingRotated).removeClass('rotating');

        $(imageBeingRotated).off('mousemove touchmove');
        setTimeout(function () { imageBeingRotated = false; }, 10);

        let $style = $(imageBeingRotated).style();
        rotateStyle[imageBeingRotated.id] = {
            transform: $style.transform
        };

        return false;
    }
    function rotateImage(e) {
        if (!imageBeingRotated) return;

        let imageCentre = getImageCentre(imageBeingRotated);
        let mouseXFromCentre = e.originalEvent.pageX - imageCentre[0];
        let mouseYFromCentre = e.originalEvent.pageY - imageCentre[1];
        let mouseAngle = Math.atan2(mouseYFromCentre, mouseXFromCentre);
        let rotation = mouseAngle - mouseStartAngle + imageStartAngle;

        // [shift] key pressed - nearest 10 degree
        if (e.shiftKey) {
            let deg = rotation * 180 / Math.PI;     // rad -&gt; deg
            deg = Math.ceil(deg / 10) * 10;         // nearest 10
            rotation = deg * Math.PI / 180;         // deg -&gt; rad
        }

        rotateAngle[imageBeingRotated.id] = rotation;

        $(imageBeingRotated).css('transform', 'rotate(' + rotation + 'rad)');
        $(imageBeingRotated).data('currentRotation', rotation);

        return false;
    }
    function getImageCentre(image) {
        $(image).css('transform', 'rotate(0rad)');

        let imageOffset = $(image).offset();
        let imageCentreX = imageOffset.left + $(image).width() / 2;
        let imageCentreY = imageOffset.top + $(image).height() / 2;

        let currentRotation = $(image).data('currentRotation');
        $(imageBeingRotated).css('transform', 'rotate(' + currentRotation + 'rad)');

        return Array(imageCentreX, imageCentreY);
    }

    presenter.addEventHandlers = function () {
        presenter.$button.on('click touchend', e =&gt; {
            e.preventDefault();
            e.stopPropagation();

            rulerButtonSelected = !rulerButtonSelected;
            handleRulerPanel();
        });

        presenter.$panel.find('.ruler_image').on('click touchend', e =&gt; {
            e.preventDefault();
            e.stopPropagation();

            let rulerTargetClass = e.target.classList[1];
            let $rulerImages = presenter.$panel.find('.ruler_image');
            let rulerSvgImage = {
                ruler_image_1: $('#ruler_1'),
                ruler_image_2: $('#ruler_2'),
                ruler_image_3: $('#ruler_3')
            };

            $rulerImages.each((idx, ruler) =&gt; {
                if (ruler.classList[1] != rulerTargetClass) {
                    if (!openAllRulers) {
                        $(ruler).removeClass('selected');
                        rulerImageSelected[idx] = false;
                        rulerSvgImage[ruler.classList[1]].addClass('hidden');
                    }
                } else {
                    rulerImageSelected[idx] = !rulerImageSelected[idx];
                    if (rulerImageSelected[idx]) {
                        $(e.target).addClass('selected');
                        rulerSvgImage[ruler.classList[1]].removeClass('hidden');
                    } else {
                        $(e.target).removeClass('selected');
                        rulerSvgImage[ruler.classList[1]].addClass('hidden');
                    }
                }
            });
        });
    };

    function selectRuler() {
        let $rulerImages = presenter.$panel.find('.ruler_image');
        let rulerSvgImage = {
            ruler_image_1: $('#ruler_1'),
            ruler_image_2: $('#ruler_2'),
            ruler_image_3: $('#ruler_3')
        };

        $rulerImages.each((idx, ruler) =&gt; {
            if (rulerImageSelected[idx]) {
                if (rulerData[currentLayout][`image_${idx + 1}`].length) {
                    rulerSvgImage[ruler.classList[1]].removeClass('hidden');
                    $(ruler).addClass('selected');
                }
            } else {
                $(ruler).removeClass('selected');
                rulerSvgImage[ruler.classList[1]].addClass('hidden');
            }
        });
    }

    // function handleRulerContainer() {
    //     let checkVisibility = Object.values(rulerData[currentLayout]).map((val, idx) =&gt; val.length &gt; 0 &amp;&amp; rulerImageSelected[idx]);
    //     if (rulerButtonSelected &amp;&amp; checkVisibility.includes(true)) {
    //         presenter.$rulerContainer.removeClass('hidden');
    //     } else {
    //         presenter.$rulerContainer.addClass('hidden');
    //     }
    // }

    function handleRulerPanel() {
        if (rulerButtonSelected) {
            presenter.$button.addClass('selected');
            presenter.$panel.removeClass('hidden');
        } else {
            presenter.$button.removeClass('selected');
            presenter.$panel.addClass('hidden');
        }
    };

    // presenter.onEventReceived = function (eventName, eventData) {
    // };

    // presenter.reset = function () {
    // };

    presenter.getState = function () {
        let state = {
            isVisible: presenter.isVisible,
            position: presenter.$view.position(),
            rulerButtonSelected: rulerButtonSelected,
            rulerImageSelected: rulerImageSelected,
            rotateStyle: rotateStyle,
            dragStyle: dragStyle,
            rotateAngle: rotateAngle
        };
        return JSON.stringify(state);
    };

    presenter.setState = function (state) {
        if (!state) return;

        let parsedState = JSON.parse(state);

        rulerButtonSelected = parsedState.rulerButtonSelected;
        handleRulerPanel();

        rulerImageSelected = parsedState.rulerImageSelected;
        selectRuler();

        dragStyle = parsedState.dragStyle;

        // set "ruler_drag" position in page after changing layout
        setTimeout(() =&gt; {
            Object.entries(dragStyle).forEach(([handleId, style]) =&gt; {
                const $handle = $(`#${handleId}`);
                if (!$handle.length) {
                    return;
                }
                const $container = $handle.parent();
                const pageW = presenter.$icPage.width();
                const pageH = presenter.$icPage.height();
                const pos = $handle.position();
                const w = $handle.outerWidth();
                const h = $handle.outerHeight();

                let left = parseInt(style.left, 10) || 0;
                let top  = parseInt(style.top,  10) || 0;

                left = Math.min(
                    Math.max(left, -pos.left),
                    pageW - pos.left - w
                );

                top = Math.min(
                    Math.max(top, -pos.top),
                    pageH - pos.top - h
                );

                $container.css({
                    left: `${left}px`,
                    top:  `${top}px`
                });
            });
        }, 20);

        rotateStyle = parsedState.rotateStyle;
        rotateAngle = parsedState.rotateAngle;
        Object.entries(rotateStyle).forEach(rotate =&gt; {
            $(`#${rotate[0]}`).css('transform', rotate[1].transform);
            $(`#${rotate[0]}`).data('currentRotation', rotateAngle[rotate[0]]);
        });

        presenter.position = parsedState.position;

        let visibility = presenter.$wrapper.css('visibility');
        let position = presenter.$wrapper.css('position');

        presenter.$wrapper.attr('style', `position:${position}; top:${presenter.position.top}px; left:${presenter.position.left}px; visibility:${visibility};`);

        presenter.isVisible = parsedState.isVisible;
        presenter.setVisibility(presenter.isVisible);
    };

    presenter.show = function () {
        presenter.setVisibility(true);
        presenter.isVisible = true;
    };

    presenter.hide = function () {
        presenter.setVisibility(false);
        presenter.isVisible = false;
    };

    presenter.setVisibility = function (isVisible) {
        presenter.$view.css('visibility', isVisible ? 'visible' : 'hidden');
    };

    presenter.executeCommand = function (name, params) {
        var commands = {
            'hide': presenter.hide,
            'show': presenter.show
        };
        Commands.dispatch(commands, name, params, presenter);
    };

    return presenter;
}</presenter></addon>
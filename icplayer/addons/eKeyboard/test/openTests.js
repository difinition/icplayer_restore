TestCase("[eKeyboard] openCommand function", {
    setUp: function () {
        this.presenter = new AddoneKeyboard_create();
        this.stubs = {
            isArrayStub: sinon.stub(),
            openStub: sinon.stub()
        };

        this.$ = {
            isArray: this.stubs.isArrayStub
        };
        this.presenter.open = this.stubs.openStub;
    },

    'test call open once when module is array': function() {
        this.stubs.isArrayStub.returns(true);

        this.presenter.openCommand({}, {});

        assertTrue(this.presenter.open.calledOnce);
    },

    'test should call open once when module is not array': function() {
        this.stubs.isArrayStub.returns(false);

        this.presenter.openCommand({}, {});

        assertTrue(this.presenter.open.calledOnce);
    },

    'test should pass arguments to open function': function () {
        this.stubs.isArrayStub.returns(true);

        var moduleID = "Module1";
        var index = "index";

        this.presenter.openCommand(moduleID, index);

        var result = this.presenter.open.args[0];

        assertEquals(moduleID, result[0]);
        assertEquals(index, result[1]);
    }
});

TestCase("[eKeyboard] open function", {
    setUp: function () {
        this.presenter = new AddoneKeyboard_create();

        this.stubs = {
            openFuncStub: sinon.stub()
        };

       this.presenter.isLoaded = true;

       this.presenter.openFunc = this.stubs.openFuncStub;
    },

    'test should call openFunc only once': function() {
        this.presenter.open({}, {});

        assertTrue(this.stubs.openFuncStub.calledOnce);
    },

    'test should pass arguments from open to openFunc': function() {
        var moduleID = "Module1";
        var index = "index";

        this.presenter.open(moduleID, index);

        var result = this.stubs.openFuncStub.args[0];
        assertEquals(moduleID, result[0]);
        assertEquals(index, result[1]);
    }
});
